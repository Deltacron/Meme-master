{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a multiplayer meme card game web application called \"Meme Masters\" built with a modern full-stack architecture. Players create or join rooms to play a Cards Against Humanity-style game where they submit funny caption cards to match photo cards selected by a rotating judge. The game supports 3+ players and includes real-time multiplayer functionality with WebSocket communication.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client is built as a single-page React application using:\n- **React 18** with TypeScript for component-based UI development\n- **Wouter** for client-side routing instead of React Router\n- **TanStack Query** for server state management and caching\n- **Tailwind CSS** with **shadcn/ui** component library for consistent styling\n- **Radix UI** primitives for accessible UI components\n- **Vite** as the build tool and development server\n\nThe frontend follows a page-component architecture with dedicated pages for home, lobby, and game states. Custom hooks manage WebSocket connections (`use-socket.ts`) and game state (`use-game-state.ts`).\n\n## Backend Architecture\nThe server uses a Node.js Express application with:\n- **Express.js** for HTTP API endpoints and middleware\n- **WebSocket Server (ws)** for real-time multiplayer communication\n- **TypeScript** for type safety across the entire stack\n- **In-memory storage** implementation for game data (MemStorage class)\n\nThe backend implements a WebSocket-first architecture where most game interactions happen through WebSocket messages rather than HTTP requests. The server manages room creation, player joining, game state synchronization, and turn-based gameplay flow.\n\n## Data Management\nThe application uses a shared schema approach:\n- **Drizzle ORM** configured for PostgreSQL with schema definitions\n- **Zod** for runtime type validation and schema validation\n- Shared TypeScript types between client and server in `/shared/schema.ts`\n- In-memory storage implementation for development/demo purposes\n\nThe data layer includes entities for users, rooms, players, cards, and game decks with proper relationships and game state management.\n\n## Game State Management\nGame flow is managed through a finite state machine with states:\n- **waiting**: Room created, waiting for minimum players\n- **selecting_judge**: Players reveal number cards to determine first judge\n- **playing**: Active gameplay with rounds of photo/caption card selection\n- **finished**: Game completed with winner determination\n\nReal-time synchronization ensures all players see consistent game state through WebSocket broadcasts.\n\n## Development Setup\nThe project uses a monorepo structure with:\n- Client code in `/client` directory\n- Server code in `/server` directory  \n- Shared types and schemas in `/shared` directory\n- Integrated build pipeline with Vite for frontend and esbuild for backend\n\n# External Dependencies\n\n## UI and Styling\n- **shadcn/ui**: Pre-built accessible React components with Tailwind CSS\n- **Radix UI**: Headless UI primitives for complex components (dialogs, dropdowns, etc.)\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Lucide React**: Icon library for consistent iconography\n\n## State Management and Data Fetching\n- **TanStack React Query**: Server state management, caching, and synchronization\n- **React Hook Form** with **@hookform/resolvers**: Form handling and validation\n\n## Database and Validation\n- **Drizzle ORM**: Type-safe ORM for PostgreSQL database operations\n- **@neondatabase/serverless**: Serverless PostgreSQL connection for Neon database\n- **Zod**: Schema validation library for runtime type checking\n- **drizzle-zod**: Integration between Drizzle schemas and Zod validation\n\n## Real-time Communication\n- **ws**: WebSocket library for real-time multiplayer functionality\n- Custom WebSocket manager class for connection handling and reconnection logic\n\n## Development Tools\n- **Vite**: Fast build tool and development server for frontend\n- **esbuild**: Fast JavaScript bundler for backend builds\n- **TypeScript**: Type system for both frontend and backend\n- **@replit/vite-plugin**: Replit-specific development enhancements\n\n## External Services\nThe application is configured to use:\n- **Neon Database**: Serverless PostgreSQL database (configured via DATABASE_URL)\n- **Replit**: Cloud development environment with integrated hosting","size_bytes":4451},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        pulse: {\n          \"0%, 100%\": { transform: \"scale(1)\" },\n          \"50%\": { transform: \"scale(1.05)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        pulse: \"pulse 2s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2915},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertRoomSchema, insertPlayerSchema, type GameState, type CaptionCard, type PhotoCard } from \"@shared/schema\";\nimport { randomBytes } from \"crypto\";\n\ninterface SocketWithData extends WebSocket {\n  playerId?: string;\n  roomId?: string;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  console.log('🔌 WebSocket server created on path: /ws');\n\n  // Generate room code\n  function generateRoomCode(): string {\n    return randomBytes(3).toString('hex').toUpperCase();\n  }\n\n  // Shuffle array utility\n  function shuffleArray<T>(array: T[]): T[] {\n    const shuffled = [...array];\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    return shuffled;\n  }\n\n  // Deal cards to players\n  async function dealCards(roomId: string) {\n    const players = await storage.getPlayersByRoom(roomId);\n    const deck = await storage.getGameDeck(roomId);\n    if (!deck) return;\n\n    const captionCards: CaptionCard[] = JSON.parse(deck.captionDeck as string);\n    const cardsPerPlayer = players.length === 3 ? 4 : 7;\n\n    let cardIndex = 0;\n    for (const player of players) {\n      const hand = captionCards.slice(cardIndex, cardIndex + cardsPerPlayer);\n      await storage.updatePlayer(player.id, { \n        hand: JSON.stringify(hand),\n        hasSubmittedCard: false,\n        hasExchangedCard: false\n      });\n      cardIndex += cardsPerPlayer;\n    }\n\n    // Update deck with remaining cards\n    const remainingCards = captionCards.slice(cardIndex);\n    await storage.updateGameDeck(roomId, {\n      captionDeck: JSON.stringify(remainingCards)\n    });\n  }\n\n  // Broadcast to room with error handling\n  function broadcastToRoom(roomId: string, message: any) {\n    let sentCount = 0;\n    let failedCount = 0;\n    \n    wss.clients.forEach((client) => {\n      const socket = client as SocketWithData;\n      if (socket.readyState === WebSocket.OPEN && socket.roomId === roomId) {\n        try {\n          socket.send(JSON.stringify(message));\n          sentCount++;\n        } catch (error) {\n          console.error('Failed to send message to client:', error);\n          failedCount++;\n        }\n      }\n    });\n    \n    console.log(`📡 Broadcast to room ${roomId}: sent to ${sentCount} clients, failed ${failedCount}`);\n  }\n\n  // Get game state\n  async function getGameState(roomId: string): Promise<GameState | null> {\n    const room = await storage.getRoom(roomId);\n    if (!room) return null;\n\n    const players = await storage.getPlayersByRoom(roomId);\n    const deck = await storage.getGameDeck(roomId);\n    if (!deck) return null;\n\n    return { room, players, deck };\n  }\n\n  // API Routes\n  app.post(\"/api/rooms\", async (req, res) => {\n    try {\n      const { hostId } = insertRoomSchema.parse(req.body);\n      let code: string;\n      let existingRoom;\n\n      // Generate unique room code\n      do {\n        code = generateRoomCode();\n        existingRoom = await storage.getRoomByCode(code);\n      } while (existingRoom);\n\n      const room = await storage.createRoom({ code, hostId });\n      await storage.createGameDeck(room.id);\n\n      res.json({ room });\n    } catch (error) {\n      console.error('Room creation error:', error);\n      res.status(400).json({ error: \"Failed to create room\" });\n    }\n  });\n\n  app.get(\"/api/rooms/:code\", async (req, res) => {\n    try {\n      const { code } = req.params;\n      const room = await storage.getRoomByCode(code);\n\n      if (!room) {\n        return res.status(404).json({ error: \"Room not found\" });\n      }\n\n      const gameState = await getGameState(room.id);\n      res.json(gameState);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get room\" });\n    }\n  });\n\n  app.get(\"/api/cards/photo\", async (req, res) => {\n    try {\n      const photoCards = await storage.getCardsByType(\"photo\");\n      res.json(photoCards);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get photo cards\" });\n    }\n  });\n\n  app.post(\"/api/rooms/:code/join\", async (req, res) => {\n    try {\n      const { code } = req.params;\n      const { name, isHost } = req.body;\n\n      console.log(`👤 Player joining room ${code}:`, { name, isHost });\n\n      const room = await storage.getRoomByCode(code);\n      if (!room) {\n        return res.status(404).json({ error: \"Room not found\" });\n      }\n\n      console.log(`🏠 Current room hostId: ${room.hostId}`);\n\n      if (room.status !== \"waiting\") {\n        return res.status(400).json({ error: \"Game already in progress\" });\n      }\n\n      const player = await storage.createPlayer({\n        roomId: room.id,\n        name\n      });\n\n      console.log(`✅ Player created: ${player.id} (${player.name})`);\n\n      // If this is the host (room creator), update the room's hostId\n      if (isHost && room.hostId === \"temp-host-id\") {\n        console.log(`🔄 Updating room ${room.code} host from ${room.hostId} to ${player.id}`);\n        await storage.updateRoom(room.id, {\n          hostId: player.id\n        });\n        console.log(`🏠 Successfully updated room ${room.code} host to player ${player.id} (${player.name})`);\n      } else {\n        console.log(`❌ Not updating host: isHost=${isHost}, currentHostId=${room.hostId}`);\n      }\n\n      const gameState = await getGameState(room.id);\n      broadcastToRoom(room.id, {\n        type: \"player_joined\",\n        gameState\n      });\n\n      res.json({ player, gameState });\n    } catch (error) {\n      console.error('Join room error:', error);\n      res.status(400).json({ error: \"Failed to join room\" });\n    }\n  });\n\n  // WebSocket handling\n  wss.on('connection', (ws: SocketWithData) => {\n    console.log('🔌 New WebSocket connection established');\n\n    // Connection cleanup on close\n    ws.on('close', async (code, reason) => {\n      console.log(`🔌 WebSocket connection closed: ${code} ${reason}`);\n      \n      // If player was in a room, mark them as offline and notify others\n      if (ws.playerId && ws.roomId) {\n        console.log(`👋 Player ${ws.playerId} disconnected from room ${ws.roomId}`);\n        \n        try {\n          await storage.updatePlayer(ws.playerId, { isOnline: false });\n          \n          const updatedGameState = await getGameState(ws.roomId);\n          if (updatedGameState) {\n            broadcastToRoom(ws.roomId, {\n              type: 'player_disconnected',\n              playerId: ws.playerId,\n              gameState: updatedGameState\n            });\n          }\n        } catch (error) {\n          console.error('Error handling player disconnect:', error);\n        }\n      }\n    });\n\n    ws.on('error', (error) => {\n      console.error('🔌 WebSocket error:', error);\n    });\n\n    // Track last processed message to prevent duplicates\n    let lastMessageId = '';\n\n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        const messageId = `${message.type}-${message.cardId || message.winnerId || Date.now()}`;\n        \n        // Prevent duplicate message processing\n        if (messageId === lastMessageId) {\n          console.log('🔄 Duplicate message ignored:', messageId);\n          return;\n        }\n        lastMessageId = messageId;\n        \n        console.log('📨 WebSocket message received:', message.type, message);\n\n        switch (message.type) {\n          case 'join_room':\n            console.log('WebSocket join_room received:', message);\n            ws.playerId = message.playerId;\n            ws.roomId = message.roomId;\n\n            // Mark player as online when they connect\n            if (ws.playerId) {\n              await storage.updatePlayer(ws.playerId, { isOnline: true });\n            }\n\n            const gameState = await getGameState(message.roomId);\n            console.log('Game state found:', !!gameState, 'for room:', message.roomId);\n\n            if (gameState) {\n              console.log('Sending game state to WebSocket client');\n              ws.send(JSON.stringify({\n                type: 'game_state',\n                gameState\n              }));\n            } else {\n              console.log('No game state found, sending error');\n              ws.send(JSON.stringify({\n                type: 'error',\n                message: 'Room not found or game state unavailable'\n              }));\n            }\n            break;\n\n          case 'start_game':\n            if (!ws.roomId) break;\n\n            const room = await storage.getRoom(ws.roomId);\n            const players = await storage.getPlayersByRoom(ws.roomId);\n\n            if (!room || players.length < 3) break;\n\n            // Assign random number cards for judge selection\n            const numberCards = shuffleArray(Array.from({length: players.length}, (_, i) => i + 1));\n\n            for (let i = 0; i < players.length; i++) {\n              await storage.updatePlayer(players[i].id, {\n                numberCard: numberCards[i]\n              });\n            }\n\n            await storage.updateRoom(ws.roomId, {\n              status: \"selecting_judge\"\n            });\n\n            const updatedGameState = await getGameState(ws.roomId);\n            broadcastToRoom(ws.roomId, {\n              type: 'judge_selection_started',\n              gameState: updatedGameState\n            });\n            break;\n\n          case 'reveal_number_card':\n            if (!ws.playerId || !ws.roomId) break;\n\n            const updatedState = await getGameState(ws.roomId);\n            broadcastToRoom(ws.roomId, {\n              type: 'number_card_revealed',\n              playerId: ws.playerId,\n              gameState: updatedState\n            });\n            break;\n\n          case 'start_round':\n            if (!ws.roomId) break;\n\n            const roomForRound = await storage.getRoom(ws.roomId);\n            const playersForRound = await storage.getPlayersByRoom(ws.roomId);\n\n            if (!roomForRound) break;\n\n            // Find judge (lowest number card)\n            const lowestNumber = Math.min(...playersForRound.map(p => p.numberCard || 999));\n            const judge = playersForRound.find(p => p.numberCard === lowestNumber);\n\n            if (!judge) break;\n\n            await storage.updateRoom(ws.roomId, {\n              status: \"playing\",\n              currentJudgeId: judge.id,\n              currentRound: 1\n            });\n\n            await dealCards(ws.roomId);\n\n            const roundGameState = await getGameState(ws.roomId);\n            broadcastToRoom(ws.roomId, {\n              type: 'round_started',\n              gameState: roundGameState\n            });\n            break;\n\n          case 'select_photo_card':\n            console.log('🎯 Photo card selection received:', message);\n            if (!ws.roomId) {\n              console.log('❌ No roomId in WebSocket connection');\n              break;\n            }\n\n            const { cardId } = message;\n            console.log('🃏 Looking for card ID:', cardId);\n            const card = await storage.getCard(cardId);\n\n            if (!card) {\n              console.log('❌ Card not found:', cardId);\n              break;\n            }\n\n            console.log('✅ Card found, updating room with selected photo card');\n            await storage.updateRoom(ws.roomId, {\n              selectedPhotoCard: JSON.stringify({\n                id: card.id,\n                imageUrl: card.imageUrl,\n                description: card.description\n              })\n            });\n\n            const photoSelectedState = await getGameState(ws.roomId);\n            console.log('📤 Broadcasting photo card selected to room:', ws.roomId);\n            broadcastToRoom(ws.roomId, {\n              type: 'photo_card_selected',\n              gameState: photoSelectedState\n            });\n            break;\n\n          case 'submit_caption_card':\n            if (!ws.playerId || !ws.roomId) break;\n\n            const { cardId: submittedCardId } = message;\n            const player = await storage.getPlayer(ws.playerId);\n            const submittingRoom = await storage.getRoom(ws.roomId);\n            const playerDeck = await storage.getGameDeck(ws.roomId);\n\n            if (!player || !submittingRoom || !playerDeck) break;\n\n            const hand: CaptionCard[] = JSON.parse(player.hand as string);\n            const submittedCard = hand.find(c => c.id === submittedCardId);\n\n            if (!submittedCard) break;\n\n            // Remove submitted card from hand and replace with new card from deck\n            const updatedHand = hand.filter(c => c.id !== submittedCardId);\n            const availableCards: CaptionCard[] = JSON.parse(playerDeck.captionDeck as string);\n            \n            if (availableCards.length > 0) {\n              const newCard = availableCards.shift();\n              if (newCard) {\n                updatedHand.push(newCard);\n                await storage.updateGameDeck(ws.roomId, {\n                  captionDeck: JSON.stringify(availableCards)\n                });\n              }\n            }\n\n            await storage.updatePlayer(ws.playerId, {\n              hasSubmittedCard: true,\n              hand: JSON.stringify(updatedHand)\n            });\n\n            const currentSubmissions = JSON.parse(submittingRoom.submittedCards as string);\n            currentSubmissions.push({\n              playerId: ws.playerId,\n              cardId: submittedCardId,\n              text: submittedCard.text\n            });\n\n            await storage.updateRoom(ws.roomId, {\n              submittedCards: JSON.stringify(currentSubmissions)\n            });\n\n            const submissionState = await getGameState(ws.roomId);\n            broadcastToRoom(ws.roomId, {\n              type: 'card_submitted',\n              gameState: submissionState\n            });\n            break;\n\n          case 'exchange_card':\n            if (!ws.playerId || !ws.roomId) break;\n\n            const { cardId: exchangeCardId } = message;\n            const exchangingPlayer = await storage.getPlayer(ws.playerId);\n            const deck = await storage.getGameDeck(ws.roomId);\n\n            if (!exchangingPlayer || !deck || exchangingPlayer.hasExchangedCard) break;\n\n            const playerHand: CaptionCard[] = JSON.parse(exchangingPlayer.hand as string);\n            const deckCards: CaptionCard[] = JSON.parse(deck.captionDeck as string);\n\n            if (deckCards.length === 0) break;\n\n            // Remove card from hand and add to discard\n            const cardIndex = playerHand.findIndex(c => c.id === exchangeCardId);\n            if (cardIndex === -1) break;\n\n            const discardedCard = playerHand.splice(cardIndex, 1)[0];\n\n            // Take new card from deck\n            const newCard = deckCards.shift();\n            if (!newCard) break;\n\n            playerHand.push(newCard);\n\n            await storage.updatePlayer(ws.playerId, {\n              hand: JSON.stringify(playerHand),\n              hasExchangedCard: true\n            });\n\n            await storage.updateGameDeck(ws.roomId, {\n              captionDeck: JSON.stringify(deckCards)\n            });\n\n            const exchangeState = await getGameState(ws.roomId);\n            ws.send(JSON.stringify({\n              type: 'card_exchanged',\n              gameState: exchangeState\n            }));\n            break;\n\n          case 'select_winner':\n            if (!ws.roomId) break;\n\n            const { winnerId } = message;\n            const winningPlayer = await storage.getPlayer(winnerId);\n            const winningRoom = await storage.getRoom(ws.roomId);\n\n            if (!winningPlayer || !winningRoom) break;\n\n            // Award trophy\n            await storage.updatePlayer(winnerId, {\n              trophies: winningPlayer.trophies + 1\n            });\n\n            // Check win condition\n            if (winningPlayer.trophies + 1 >= 5) {\n              await storage.updateRoom(ws.roomId, {\n                status: \"finished\"\n              });\n\n              const finalState = await getGameState(ws.roomId);\n              broadcastToRoom(ws.roomId, {\n                type: 'game_finished',\n                winner: winningPlayer,\n                gameState: finalState\n              });\n            } else {\n              // Prepare next round\n              const allPlayers = await storage.getPlayersByRoom(ws.roomId);\n              const currentJudgeIndex = allPlayers.findIndex(p => p.id === winningRoom.currentJudgeId);\n              const nextJudgeIndex = (currentJudgeIndex + 1) % allPlayers.length;\n              const nextJudge = allPlayers[nextJudgeIndex];\n\n              await storage.updateRoom(ws.roomId, {\n                currentJudgeId: nextJudge.id,\n                currentRound: winningRoom.currentRound + 1,\n                selectedPhotoCard: null,\n                submittedCards: \"[]\"\n              });\n\n              await dealCards(ws.roomId);\n\n              const nextRoundState = await getGameState(ws.roomId);\n              broadcastToRoom(ws.roomId, {\n                type: 'round_winner_selected',\n                winner: winningPlayer,\n                gameState: nextRoundState\n              });\n            }\n            break;\n\n          case 'restart_game':\n            if (!ws.roomId) break;\n\n            console.log('🔄 Restarting game for room:', ws.roomId);\n            \n            // Reset room to waiting state\n            await storage.updateRoom(ws.roomId, {\n              status: \"waiting\",\n              currentJudgeId: null,\n              currentRound: 0,\n              selectedPhotoCard: null,\n              submittedCards: \"[]\"\n            });\n\n            // Reset all players\n            const roomPlayers = await storage.getPlayersByRoom(ws.roomId);\n            for (const player of roomPlayers) {\n              await storage.updatePlayer(player.id, {\n                hand: \"[]\",\n                trophies: 0,\n                numberCard: null,\n                hasSubmittedCard: false,\n                hasExchangedCard: false\n              });\n            }\n\n            // Recreate game deck with fresh cards\n            await storage.deleteGameDeck(ws.roomId);\n            await storage.createGameDeck(ws.roomId);\n\n            const restartedGameState = await getGameState(ws.roomId);\n            broadcastToRoom(ws.roomId, {\n              type: 'game_restarted',\n              gameState: restartedGameState\n            });\n            break;\n        }\n      } catch (error) {\n        console.error('WebSocket error:', error);\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Invalid message format'\n        }));\n      }\n    });\n\n    ws.on('close', async () => {\n      if (ws.playerId && ws.roomId) {\n        await storage.updatePlayer(ws.playerId, { isOnline: false });\n\n        const gameState = await getGameState(ws.roomId);\n        broadcastToRoom(ws.roomId, {\n          type: 'player_disconnected',\n          playerId: ws.playerId,\n          gameState\n        });\n      }\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":19260},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Room,\n  type InsertRoom,\n  type Player,\n  type InsertPlayer,\n  type Card,\n  type InsertCard,\n  type GameDeck,\n  type CaptionCard,\n  type PhotoCard,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { getImagesFromBucket, testSupabaseConnection } from \"./lib/supabase\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Room methods\n  getRoom(id: string): Promise<Room | undefined>;\n  getRoomByCode(code: string): Promise<Room | undefined>;\n  createRoom(room: InsertRoom & { code: string }): Promise<Room>;\n  updateRoom(id: string, updates: Partial<Room>): Promise<Room | undefined>;\n  deleteRoom(id: string): Promise<boolean>;\n\n  // Player methods\n  getPlayer(id: string): Promise<Player | undefined>;\n  getPlayersByRoom(roomId: string): Promise<Player[]>;\n  createPlayer(player: InsertPlayer & { roomId: string }): Promise<Player>;\n  updatePlayer(\n    id: string,\n    updates: Partial<Player>,\n  ): Promise<Player | undefined>;\n  deletePlayer(id: string): Promise<boolean>;\n  deletePlayersByRoom(roomId: string): Promise<boolean>;\n\n  // Card methods\n  getCard(id: string): Promise<Card | undefined>;\n  getAllCards(): Promise<Card[]>;\n  getCardsByType(type: \"caption\" | \"photo\"): Promise<Card[]>;\n  createCard(card: InsertCard): Promise<Card>;\n\n  // Game deck methods\n  getGameDeck(roomId: string): Promise<GameDeck | undefined>;\n  createGameDeck(roomId: string): Promise<GameDeck>;\n  updateGameDeck(\n    roomId: string,\n    updates: Partial<GameDeck>,\n  ): Promise<GameDeck | undefined>;\n  deleteGameDeck(roomId: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private rooms: Map<string, Room> = new Map();\n  private players: Map<string, Player> = new Map();\n  private cards: Map<string, Card> = new Map();\n  private gameDecks: Map<string, GameDeck> = new Map();\n\n  constructor() {\n    this.initializeCards();\n  }\n\n  private async initializeCards() {\n    // Initialize caption cards - 360 total cards\n    const captionCards = [\n      \"Oh great, another Monday. Just what I needed.\",\n      \"Sure, pineapple totally belongs on pizza… said no one sane.\",\n      \"Me pretending to care about your weekend plans.\",\n      \"Ah yes, my degree in Googling answers finally paying off.\",\n      \"Love it when Netflix asks if I’m still watching. No Karen, I’m rotting.\",\n      \"Me after going to the gym once: fitness influencer.\",\n      \"Wow, adulting is so fun. Bills, taxes, emotional damage… sign me up.\",\n      \"When your boss says 'we’re like a family' but pays you in exposure.\",\n      \"That moment you realize your 'five-year plan' was just surviving.\",\n      \"Nothing screams confidence like pushing a pull door.\",\n      \"When you open the front camera: jump scare edition.\",\n      \"Love that for me—battery dies at 1% right when life gets interesting.\",\n      \"Me, trying to flirt: so… do you like bread?\",\n      \"That awkward silence when you laugh at your own joke and nobody else does.\",\n      \"Yes, I totally understood that math problem. Said me, never.\",\n      \"When your crush waves… but it’s actually to the person behind you.\",\n      \"Wow, so cool, you woke up at 5am to 'hustle.' I woke up at noon and cried.\",\n      \"When you remember something embarrassing you did 10 years ago. Cute.\",\n      \"Love it when my Uber driver gives me free trauma with the ride.\",\n      \"Me: 'I’ll only have one cookie.' Also me: *eats the entire pack*.\",\n      \"Oh sure, WiFi, take your time. It’s not like I needed the internet to live.\",\n      \"When someone says 'money can’t buy happiness.' Okay, give me yours then.\",\n      \"Me on Monday: I’ll eat clean this week. Me on Tuesday: *deep-fried sadness*.\",\n      \"Yes, let’s all take turns showing vacation photos no one asked for.\",\n      \"When you text 'I miss you' and they reply with 'k.' Love that energy.\",\n      \"Wow, adulthood is just asking 'what’s for dinner' until you die.\",\n      \"Me after oversharing in a group chat: Witness protection, please.\",\n      \"That magical moment when your pet ignores you like everyone else does.\",\n      \"Love when my stomach growls louder than my personality.\",\n      \"When Spotify plays sad songs like it knows my trauma personally.\",\n      \"Cool, autocorrect. I definitely meant to text my boss 'I love you.'\",\n      \"Oh great, another email saying 'per my last email.' My favorite genre: passive aggression.\",\n      \"Me: *studies for 10 minutes*. Brain: okay we deserve a 3-hour nap now.\",\n      \"Nothing like tripping in public to humble you instantly.\",\n      \"When someone says 'let’s circle back.' Translation: let’s never talk about this again.\",\n      \"That face when your Uber Eats order is 'delivered' but nowhere to be found.\",\n      \"Wow, so quirky, you play guitar. Teach me Wonderwall, Chad.\",\n      \"When the teacher says 'pair up' and suddenly you’re invisible.\",\n      \"Yes, Karen, please tell me again how essential oils cure everything.\",\n      \"Oh wow, the printer jammed again. Truly groundbreaking technology.\",\n      \"When you clap back perfectly… three hours too late.\",\n      \"My favorite hobby? Pretending my life is a sitcom while crying.\",\n      \"When you realize your 'emergency fund' is just $5 and a coupon.\",\n      \"Oh joy, the elevator is stuck. Love my new panic room.\",\n      \"When someone says 'you’ve changed.' Yeah, it’s called growth, Brenda.\",\n      \"Wow, what a surprise, my horoscope says 'bad luck.' Groundbreaking.\",\n      \"When you sneeze in public and people look at you like Patient Zero.\",\n      \"Love that for me—accidentally liked a 6-year-old Instagram photo at 3am.\",\n      \"That magical moment when your alarm clock ruins your dreams.\",\n      \"Me after folding laundry: Olympic gold medalist in procrastination.\",\n      \"Nothing screams romance like arguing about where to eat.\",\n      \"When the waiter says 'enjoy your meal' and I say 'you too.'\",\n      \"That smile you give when your WiFi finally works again.\",\n      \"Oh sure, let’s do 'trust falls.' I totally trust you, Chad.\",\n      \"When your mom says 'we need to talk.' RIP me.\",\n      \"The joy of realizing you’ve been muted on Zoom for 20 minutes.\",\n      \"Love that awkward moment when your stomach makes whale noises.\",\n      \"Me pretending I know how taxes work.\",\n      \"When your AirPods die mid-walk and now you’re just… existing.\",\n      \"The look you give when your phone autocorrects to 'duck.'\",\n      \"When you binge-watch a whole season and Netflix judges you.\",\n      \"That magical time when your bank balance is just 'try again.'\",\n      \"When you realize your bed is the only one who understands you.\",\n      \"Oh sure, let’s all pretend we know what 'crypto' means.\",\n      \"Me after eating one salad: bodybuilder mode activated.\",\n      \"When someone claps after the plane lands… chill, hero.\",\n      \"That smile you give when the barista spells your name wrong again.\",\n      \"Nothing like realizing the WiFi password is case sensitive.\",\n      \"When you accidentally send a meme to the wrong chat. Bye forever.\",\n      \"Oh cool, another wedding invite I can’t afford.\",\n      \"When you laugh at a meme but realize it’s about you.\",\n      \"Me explaining to my dog why I can’t share my food.\",\n      \"The thrill of realizing your jeans shrank (or maybe it’s you).\",\n      \"When you walk into a room and forget why you’re there.\",\n      \"That joy when someone says 'let’s split the bill evenly.'\",\n      \"When you sneeze and everyone says 'bless you' like they care.\",\n      \"Love that for me—3 alarms set and still overslept.\",\n      \"When your GPS says 'recalculating.' Mood.\",\n      \"Me pretending my iced coffee is a personality trait.\",\n      \"When you get tagged in an ugly photo and can’t unsee it.\",\n      \"The fun of realizing your package is 'still in transit.'\",\n      \"When your friend cancels plans and you’re secretly relieved.\",\n      \"That moment when autocorrect changes 'no' to 'moist.'\",\n      \"Oh cool, another inspirational quote I’ll never use.\",\n      \"When you reply 'haha' but you’re actually dying inside.\",\n      \"Me explaining my life choices to the mirror: questionable.\",\n      \"When someone eats loudly and you plot their downfall.\",\n      \"That second when you realize your mic was never muted.\",\n      \"Me pretending I like hiking for the Instagram photo.\",\n      \"When the group chat ignores your meme. Betrayal.\",\n      \"Love it when my pet judges me harder than humans.\",\n      \"That sinking feeling when your card declines for $3.\",\n      \"Me after cooking one meal: world-class chef.\",\n      \"When you click 'reply all' by mistake. Instant regret.\",\n      \"That face when the vending machine steals your money.\",\n      \"When someone texts 'we need to talk.' Pure panic.\",\n      \"Me laughing at my own jokes since no one else will.\",\n      \"That thrill when you find fries at the bottom of the bag.\",\n      \"When your crush says 'bro.' Friend-zoned forever.\",\n      \"Oh, you meditate? I stress-eat Doritos. Same thing.\",\n      \"When you wear white and instantly spill coffee on it.\",\n      \"That magic moment when your laptop updates mid-meeting.\",\n      \"When you rewatch childhood shows and realize they were weird.\",\n      \"Me pretending I know how to use Excel.\",\n      \"When someone waves and you wave back… wrong person.\",\n      \"That feeling when Spotify ads attack your broke soul.\",\n      \"Me trying to parallel park with witnesses around.\",\n      \"When someone says 'rise and grind.' I’d rather nap.\",\n      \"That smile when your food delivery finally arrives.\",\n      \"When you sneeze three times and people say 'stop.'\",\n      \"Oh look, another influencer selling fake happiness.\",\n      \"When you accidentally send your boss a meme.\",\n      \"That look you give when someone says 'calm down.'\",\n      \"When your autocorrect exposes you in the group chat.\",\n      \"Love when my brain replays cringe moments at 3am.\",\n      \"Me explaining to my plant why it’s dying. Sorry queen.\",\n      \"That awkward pause after you say 'you too' to the waiter.\",\n      \"When your Amazon package says 'out for delivery' all day.\",\n      \"Me pretending to be productive but scrolling memes.\",\n      \"When someone asks me to smile more. No thanks.\",\n      \"That thrill when the vending machine actually works.\",\n      \"When you clap at the end of a movie… why though?\",\n      \"Me after buying one book: intellectual icon.\",\n      \"When someone says 'let’s just vibe.' Okay, therapist.\",\n      \"That face when your crush doesn’t text back. Ever.\",\n      \"When you lie down and suddenly remember everything embarrassing.\",\n      \"That fun moment when your password is wrong 10 times.\",\n      \"When you eat hot food and burn your tongue—life ruined.\",\n      \"Love it when someone says 'let’s go on a run.' Blocked.\",\n      \"When your headphones tangle themselves overnight. Black magic.\",\n      \"That joy when your package arrives a week late.\",\n      \"When someone asks 'why are you single?' Bold question.\",\n      \"Me acting surprised when my bad choices catch up.\",\n      \"When someone says 'new year, new me.' Lies.\",\n      \"That panic when your Zoom camera turns on unexpectedly.\",\n      \"Me pretending I didn’t just trip in public.\",\n      \"When you accidentally click 'like' on a 7-year-old post.\",\n      \"That moment when Netflix judges you for bingeing.\",\n      \"Me after one sip of wine: sommelier.\",\n      \"When someone says 'good vibes only.' Okay, cult leader.\",\n      \"That awkward moment when you wave at a stranger.\",\n      \"When your alarm goes off and you question life.\",\n      \"Love it when I sneeze and scare my own pet.\",\n      \"When your favorite snack is sold out—apocalypse.\",\n      \"That fake smile you give while suffering inside.\",\n      \"When someone calls instead of texts. Jail.\",\n      \"Oh cool, another inspirational podcast. Revolutionary.\",\n      \"When you sneeze and your back cracks too.\",\n      \"That second you realize your screen is being shared.\",\n      \"When someone says 'let’s do brunch.' Translation: overpriced eggs.\",\n      \"Me explaining astrology to my skeptical friend.\",\n      \"That awkward silence when you don’t know lyrics.\",\n      \"When you hear your own voice on a recording. Yikes.\",\n      \"Love when I click 'snooze' and ruin my life.\",\n      \"When your sibling eats your leftovers. Crime scene.\",\n      \"That time when you say 'you too' to the cashier.\",\n      \"Me pretending I’ll only watch one episode.\",\n      \"When someone says 'trust the process.' Okay, guru.\",\n      \"That joy when you step on a Lego. Pure pain.\", \n    ];\n\n\n    // Initialize photo cards - 75 total cards\n    const photoCards = [\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1514888286974-6c03e2ca1dba?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Cool cat with sunglasses\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1552053831-71594a27632d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Surprised looking dog\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1518717758536-85ae29035b6d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Confused looking dog\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1573865526739-10659fec78a5?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Grumpy cat face\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1583337130417-3346a1be7dee?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Happy golden retriever\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Serious looking cat\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1601758228041-f3b2795255f1?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Sleepy cat\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1517849845537-4d257902454a?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Excited dog with tongue out\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1596854407944-bf87f6fdd49e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Wise looking owl\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1425082661705-1834bfd09dca?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Thoughtful monkey\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1571566882372-1598d88abd90?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Laughing hyena\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1544197150-b99a580bb7a8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Curious lemur\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1583212292454-1fe6229603b7?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Sleepy sloth\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1560807707-8cc77767d783?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Dramatic llama\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Unimpressed cat\",\n      },\n      // --- Adding many more ---\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1518717758536-85ae29035b6d?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Dog looking suspicious\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1606112219348-204d7d8b94ee?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Penguin mid-waddle\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1504208434309-cb69f4fe52b0?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Horse making funny face\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1504208434309-cb69f4fe52b0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n        description: \"Goat looking dramatic\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1574158622682-e40e69881006?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Parrot giving side eye\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1517423440428-a5a00ad493e8?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Baby monkey holding on\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1555685812-4b943f1cb0eb?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Pug in a hoodie\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1583337130417-3346a1be7dee?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Dog with funny smile\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1593134257782-6aa1b5c9a7f2?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Goose looking offended\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1501706362039-c6e80948a78a?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Cow sticking tongue out\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1605733160314-4f1bdfc6c759?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Sheep looking majestic\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1601758125946-6ec2c22fcf04?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Rabbit mid-jump\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1560807707-8cc77767d783?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Alpaca with hairdo\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1517849845537-4d257902454a?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Bulldog puppy\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1611262588024-d05d6d339239?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Otter holding hands\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1614853311685-f9e3b6ea4c9b?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Cat in a box\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1614853311730-621f081e6e33?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Ferret being silly\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1606111745807-5d5f29c66ef0?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Chicken looking suspicious\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1614853311898-441982e4a6e2?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Seal clapping\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1606112219348-204d7d8b94ee?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Penguin face closeup\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1614853311592-727d05f9b0a7?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Horse showing teeth\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1614853311739-9db6466b7403?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Duck with attitude\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1621202145742-65e9d3b0b2a7?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Dog wearing birthday hat\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1619983081563-430c27e5a07d?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Cat sitting like a human\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1605460375648-278bcbd579a6?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Goat photobombing picture\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1629931016224-73c0bb3f9e84?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Piglet with muddy nose\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1526336024174-e58f5cdd8e13?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Squirrel mid-bite\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1603349130186-0f88e72f1943?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Dog with butterfly on nose\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1603349194443-09dd270b64d2?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Donkey laughing\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1606111745799-dbad8c7c94c3?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Cat wearing a bow tie\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1558788353-f76d92427f16?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Dog in sunglasses\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1568572933382-74d440642117?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Cat looking shocked\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1614853311588-9e48e97e62c2?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Goose chasing camera\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1614853311533-bc21b9a1a4d8?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Dog caught stealing food\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1592194996308-7b43878e84a6?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Cow looking surprised\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1592194996498-04f721ef3e38?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Horse staring dramatically\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1592194996230-1a6b8a1af9da?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Cat with tongue out\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1589881133823-4a08aa61367d?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Bear waving paw\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1589881125776-4d63e1e36fc4?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Owl mid-blink\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1589881125776-1c9d32fd6f4b?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Camel smiling\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1588797469599-b601e5aa9a66?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Cat squinting in sun\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1603732552658-621f9a4f3a3d?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Goat sticking tongue out\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1603732547415-6ecb438ef15e?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Dog with messy hair\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1598133894009-f72d5b7dc702?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Moose looking grumpy\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1598133894040-bb8dbd048c38?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Duck walking dramatically\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1619983081740-469a7a9a7ac1?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Cat staring into space\",\n      },\n      {\n        imageUrl:\n          \"https://images.unsplash.com/photo-1620021081042-91f0acb2a537?crop=entropy&cs=tinysrgb&fit=crop&w=400&h=300\",\n        description: \"Donkey giving side eye\",\n      },\n    ];\n\n\n    captionCards.forEach((text) => {\n      const id = randomUUID();\n      this.cards.set(id, {\n        id,\n        type: \"caption\",\n        content: text,\n        imageUrl: null,\n        description: null,\n      });\n    });\n\n    photoCards.forEach((photo) => {\n      const id = randomUUID();\n      this.cards.set(id, {\n        id,\n        type: \"photo\",\n        content: photo.description,\n        imageUrl: photo.imageUrl,\n        description: photo.description,\n      });\n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Room methods\n  async getRoom(id: string): Promise<Room | undefined> {\n    return this.rooms.get(id);\n  }\n\n  async getRoomByCode(code: string): Promise<Room | undefined> {\n    return Array.from(this.rooms.values()).find((room) => room.code === code);\n  }\n\n  async createRoom(insertRoom: InsertRoom & { code: string }): Promise<Room> {\n    const id = randomUUID();\n    const room: Room = {\n      ...insertRoom,\n      id,\n      status: \"waiting\",\n      currentJudgeId: null,\n      currentRound: 0,\n      selectedPhotoCard: null,\n      submittedCards: \"[]\",\n      createdAt: new Date(),\n    };\n    this.rooms.set(id, room);\n    return room;\n  }\n\n  async updateRoom(\n    id: string,\n    updates: Partial<Room>,\n  ): Promise<Room | undefined> {\n    const room = this.rooms.get(id);\n    if (!room) return undefined;\n\n    const updatedRoom = { ...room, ...updates };\n    this.rooms.set(id, updatedRoom);\n    return updatedRoom;\n  }\n\n  async deleteRoom(id: string): Promise<boolean> {\n    return this.rooms.delete(id);\n  }\n\n  // Player methods\n  async getPlayer(id: string): Promise<Player | undefined> {\n    return this.players.get(id);\n  }\n\n  async getPlayersByRoom(roomId: string): Promise<Player[]> {\n    return Array.from(this.players.values()).filter(\n      (player) => player.roomId === roomId,\n    );\n  }\n\n  async createPlayer(\n    insertPlayer: InsertPlayer & { roomId: string },\n  ): Promise<Player> {\n    const id = randomUUID();\n    const player: Player = {\n      ...insertPlayer,\n      id,\n      isOnline: true,\n      hand: \"[]\",\n      trophies: 0,\n      numberCard: null,\n      hasSubmittedCard: false,\n      hasExchangedCard: false,\n      joinedAt: new Date(),\n    };\n    this.players.set(id, player);\n    return player;\n  }\n\n  async updatePlayer(\n    id: string,\n    updates: Partial<Player>,\n  ): Promise<Player | undefined> {\n    const player = this.players.get(id);\n    if (!player) return undefined;\n\n    const updatedPlayer = { ...player, ...updates };\n    this.players.set(id, updatedPlayer);\n    return updatedPlayer;\n  }\n\n  async deletePlayer(id: string): Promise<boolean> {\n    return this.players.delete(id);\n  }\n\n  async deletePlayersByRoom(roomId: string): Promise<boolean> {\n    const players = await this.getPlayersByRoom(roomId);\n    players.forEach((player) => this.players.delete(player.id));\n    return true;\n  }\n\n  // Card methods\n  async getCard(id: string): Promise<Card | undefined> {\n    return this.cards.get(id);\n  }\n\n  async getAllCards(): Promise<Card[]> {\n    return Array.from(this.cards.values());\n  }\n\n  async getCardsByType(type: \"caption\" | \"photo\"): Promise<Card[]> {\n    return Array.from(this.cards.values()).filter((card) => card.type === type);\n  }\n\n  async createCard(insertCard: InsertCard): Promise<Card> {\n    const id = randomUUID();\n    const card: Card = {\n      ...insertCard,\n      id,\n      description: insertCard.description || null,\n      imageUrl: insertCard.imageUrl || null,\n    };\n    this.cards.set(id, card);\n    return card;\n  }\n\n  // Game deck methods\n  async getGameDeck(roomId: string): Promise<GameDeck | undefined> {\n    return this.gameDecks.get(roomId);\n  }\n\n  async createGameDeck(roomId: string): Promise<GameDeck> {\n    const allCaptionCards = await this.getCardsByType(\"caption\");\n    const allPhotoCards = await this.getCardsByType(\"photo\");\n\n    // Transform Card objects to CaptionCard format\n    const transformedCaptions = allCaptionCards.map((card) => ({\n      id: card.id,\n      text: card.content,\n    }));\n\n    // Transform Card objects to PhotoCard format\n    const transformedPhotos = allPhotoCards.map((card) => ({\n      id: card.id,\n      imageUrl: card.imageUrl!,\n      description: card.description!,\n    }));\n\n    const shuffledCaptions = [...transformedCaptions].sort(\n      () => Math.random() - 0.5,\n    );\n    const shuffledPhotos = [...transformedPhotos].sort(\n      () => Math.random() - 0.5,\n    );\n\n    const deck: GameDeck = {\n      id: randomUUID(),\n      roomId,\n      captionDeck: JSON.stringify(shuffledCaptions),\n      photoDeck: JSON.stringify(shuffledPhotos),\n      discardPile: \"[]\",\n    };\n\n    this.gameDecks.set(roomId, deck);\n    return deck;\n  }\n\n  async updateGameDeck(\n    roomId: string,\n    updates: Partial<GameDeck>,\n  ): Promise<GameDeck | undefined> {\n    const deck = this.gameDecks.get(roomId);\n    if (!deck) return undefined;\n\n    const updatedDeck = { ...deck, ...updates };\n    this.gameDecks.set(roomId, updatedDeck);\n    return updatedDeck;\n  }\n\n  async deleteGameDeck(roomId: string): Promise<boolean> {\n    return this.gameDecks.delete(roomId);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":30918},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, jsonb, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const rooms = pgTable(\"rooms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 6 }).notNull().unique(),\n  hostId: varchar(\"host_id\").notNull(),\n  status: varchar(\"status\", { enum: [\"waiting\", \"selecting_judge\", \"playing\", \"finished\"] }).notNull().default(\"waiting\"),\n  currentJudgeId: varchar(\"current_judge_id\"),\n  currentRound: integer(\"current_round\").notNull().default(0),\n  selectedPhotoCard: jsonb(\"selected_photo_card\"),\n  submittedCards: jsonb(\"submitted_cards\").default(\"[]\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const players = pgTable(\"players\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roomId: varchar(\"room_id\").notNull(),\n  name: varchar(\"name\").notNull(),\n  isOnline: boolean(\"is_online\").notNull().default(true),\n  hand: jsonb(\"hand\").default(\"[]\"),\n  trophies: integer(\"trophies\").notNull().default(0),\n  numberCard: integer(\"number_card\"),\n  hasSubmittedCard: boolean(\"has_submitted_card\").notNull().default(false),\n  hasExchangedCard: boolean(\"has_exchanged_card\").notNull().default(false),\n  joinedAt: timestamp(\"joined_at\").notNull().default(sql`now()`),\n});\n\nexport const cards = pgTable(\"cards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: varchar(\"type\", { enum: [\"caption\", \"photo\"] }).notNull(),\n  content: text(\"content\").notNull(),\n  imageUrl: text(\"image_url\"),\n  description: text(\"description\"),\n});\n\nexport const gameDecks = pgTable(\"game_decks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roomId: varchar(\"room_id\").notNull(),\n  captionDeck: jsonb(\"caption_deck\").default(\"[]\"),\n  photoDeck: jsonb(\"photo_deck\").default(\"[]\"),\n  discardPile: jsonb(\"discard_pile\").default(\"[]\"),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertRoomSchema = createInsertSchema(rooms).pick({\n  hostId: true,\n});\n\nexport const insertPlayerSchema = createInsertSchema(players).pick({\n  name: true,\n});\n\nexport const insertCardSchema = createInsertSchema(cards).pick({\n  type: true,\n  content: true,\n  imageUrl: true,\n  description: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertRoom = z.infer<typeof insertRoomSchema>;\nexport type Room = typeof rooms.$inferSelect;\n\nexport type InsertPlayer = z.infer<typeof insertPlayerSchema>;\nexport type Player = typeof players.$inferSelect;\n\nexport type InsertCard = z.infer<typeof insertCardSchema>;\nexport type Card = typeof cards.$inferSelect;\n\nexport type GameDeck = typeof gameDecks.$inferSelect;\n\n// Game state types\nexport type GameState = {\n  room: Room;\n  players: Player[];\n  deck: GameDeck;\n};\n\nexport type CaptionCard = {\n  id: string;\n  text: string;\n};\n\nexport type PhotoCard = {\n  id: string;\n  imageUrl: string;\n  description: string;\n};\n\nexport type SubmittedCard = {\n  playerId: string;\n  cardId: string;\n  text: string;\n};\n","size_bytes":3492},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ToastNotifications } from \"@/components/ui/toast-notifications\";\nimport Home from \"@/pages/home\";\nimport Lobby from \"@/pages/lobby\";\nimport Game from \"@/pages/game\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/lobby/:code\" component={Lobby} />\n      <Route path=\"/game/:code\" component={Game} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <ToastNotifications />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":978},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(43, 96%, 56%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(217, 91%, 60%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(262, 83%, 58%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.game-card {\n  background: hsl(215, 28%, 17%);\n  color: white;\n  transition: all 0.2s ease;\n}\n\n.game-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 10px 25px rgba(0,0,0,0.2);\n}\n\n.game-card.selected {\n  border: 3px solid var(--primary);\n  transform: translateY(-8px);\n}\n\n.trophy-icon {\n  color: hsl(43, 96%, 56%);\n  filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));\n}\n\n.pulse-animation {\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n}\n\n.card-flip {\n  perspective: 1000px;\n}\n\n.card-flip-inner {\n  transition: transform 0.6s;\n  transform-style: preserve-3d;\n}\n\n.card-flip.flipped .card-flip-inner {\n  transform: rotateY(180deg);\n}\n\n.card-flip-front, .card-flip-back {\n  backface-visibility: hidden;\n}\n\n.card-flip-back {\n  transform: rotateY(180deg);\n}\n\n.floating-ui {\n  backdrop-filter: blur(10px);\n  background: rgba(255, 255, 255, 0.9);\n}\n\n.dark .floating-ui {\n  background: rgba(0, 0, 0, 0.8);\n}\n","size_bytes":6018},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-game-state.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useSocket } from './use-socket';\nimport { useToast } from '@/hooks/use-toast';\nimport { type GameState, type Player } from '@shared/schema';\n\nexport function useGameState() {\n  const [gameState, setGameState] = useState<GameState | null>(null);\n  const [currentPlayer, setCurrentPlayer] = useState<Player | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'connecting' | 'disconnected'>('disconnected');\n  const { send, on, off } = useSocket();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const handleGameState = (data: any) => {\n      setGameState(data.gameState);\n      setIsLoading(false);\n    };\n\n    const handlePlayerJoined = (data: any) => {\n      setGameState(data.gameState);\n    };\n\n    const handleJudgeSelectionStarted = (data: any) => {\n      setGameState(data.gameState);\n    };\n\n    const handleNumberCardRevealed = (data: any) => {\n      setGameState(data.gameState);\n    };\n\n    const handleRoundStarted = (data: any) => {\n      setGameState(data.gameState);\n    };\n\n    const handlePhotoCardSelected = (data: any) => {\n      setGameState(data.gameState);\n    };\n\n    const handleCardSubmitted = (data: any) => {\n      setGameState(data.gameState);\n    };\n\n    const handleCardExchanged = (data: any) => {\n      setGameState(data.gameState);\n    };\n\n    const handleRoundWinnerSelected = (data: any) => {\n      setGameState(data.gameState);\n    };\n\n    const handleGameFinished = (data: any) => {\n      setGameState(data.gameState);\n    };\n\n    const handleGameRestarted = (data: any) => {\n      setGameState(data.gameState);\n      \n      // Redirect ALL players to lobby when game is restarted\n      const roomCode = data.gameState?.room?.code;\n      if (roomCode) {\n        console.log('🔄 Game restarted, redirecting to lobby:', roomCode);\n        // Use window.location to ensure all players get redirected\n        window.location.href = `/lobby/${roomCode}`;\n      }\n    };\n\n    const handlePlayerDisconnected = (data: any) => {\n      setGameState(data.gameState);\n      \n      // Only show toast for other players disconnecting (not for yourself)\n      if (currentPlayer && data.playerId !== currentPlayer.id) {\n        const disconnectedPlayerName = gameState?.players.find(p => p.id === data.playerId)?.name || 'A player';\n        toast({\n          title: \"👋 Player Left\",\n          description: `${disconnectedPlayerName} has disconnected from the game.`,\n        });\n      }\n    };\n\n    const handleError = (data: any) => {\n      setError(data.message);\n      setIsLoading(false);\n      toast({\n        title: \"❌ Connection Error\",\n        description: data.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    };\n\n    const handleConnectionStatusChange = (status: 'connected' | 'connecting' | 'disconnected') => {\n      const prevStatus = connectionStatus;\n      setConnectionStatus(status);\n      \n      if (status === 'connected' && prevStatus !== 'connected') {\n        // Force component reload on successful reconnection to fix UI responsiveness\n        if (currentPlayer?.id && gameState?.room.id) {\n          console.log('🔄 Reconnected successfully, refreshing game state');\n          joinRoom(currentPlayer.id, gameState.room.id);\n        }\n        \n        // Only show connected toast if we were previously disconnected\n        if (prevStatus === 'disconnected' || prevStatus === 'connecting') {\n          toast({\n            title: \"✅ Connected\",\n            description: \"Successfully reconnected to the game!\",\n          });\n        }\n      } else if (status === 'disconnected' && prevStatus === 'connected') {\n        // Only show disconnected toast when actually losing connection\n        toast({\n          title: \"⚠️ Disconnected\", \n          description: \"Connection lost. Please refresh the page to reconnect.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    on('game_state', handleGameState);\n    on('player_joined', handlePlayerJoined);\n    on('judge_selection_started', handleJudgeSelectionStarted);\n    on('number_card_revealed', handleNumberCardRevealed);\n    on('round_started', handleRoundStarted);\n    on('photo_card_selected', handlePhotoCardSelected);\n    on('card_submitted', handleCardSubmitted);\n    on('card_exchanged', handleCardExchanged);\n    on('round_winner_selected', handleRoundWinnerSelected);\n    on('game_finished', handleGameFinished);\n    on('game_restarted', handleGameRestarted);\n    on('player_disconnected', handlePlayerDisconnected);\n    on('error', handleError);\n    on('connection_status', handleConnectionStatusChange);\n\n    return () => {\n      off('game_state', handleGameState);\n      off('player_joined', handlePlayerJoined);\n      off('judge_selection_started', handleJudgeSelectionStarted);\n      off('number_card_revealed', handleNumberCardRevealed);\n      off('round_started', handleRoundStarted);\n      off('photo_card_selected', handlePhotoCardSelected);\n      off('card_submitted', handleCardSubmitted);\n      off('card_exchanged', handleCardExchanged);\n      off('round_winner_selected', handleRoundWinnerSelected);\n      off('game_finished', handleGameFinished);\n      off('game_restarted', handleGameRestarted);\n      off('player_disconnected', handlePlayerDisconnected);\n      off('error', handleError);\n      off('connection_status', handleConnectionStatusChange);\n    };\n  }, [on, off]);\n\n  const joinRoom = (playerId: string, roomId: string) => {\n    setIsLoading(true);\n    setError(null);\n    send('join_room', { playerId, roomId });\n    \n    // Add timeout fallback in case no response comes back\n    setTimeout(() => {\n      if (isLoading) {\n        console.warn('Join room timeout - stopping loading state');\n        setIsLoading(false);\n      }\n    }, 5000);\n  };\n\n  const startGame = () => {\n    send('start_game');\n  };\n\n  const revealNumberCard = () => {\n    send('reveal_number_card');\n  };\n\n  const startRound = () => {\n    send('start_round');\n  };\n\n  const selectPhotoCard = (cardId: string) => {\n    send('select_photo_card', { cardId });\n  };\n\n  const submitCaptionCard = (cardId: string) => {\n    send('submit_caption_card', { cardId });\n  };\n\n  const exchangeCard = (cardId: string) => {\n    send('exchange_card', { cardId });\n  };\n\n  const selectWinner = (winnerId: string) => {\n    send('select_winner', { winnerId });\n  };\n\n  const restartGame = () => {\n    send('restart_game');\n  };\n\n  return {\n    gameState,\n    currentPlayer,\n    isLoading,\n    error,\n    connectionStatus,\n    setCurrentPlayer,\n    setError,\n    joinRoom,\n    startGame,\n    revealNumberCard,\n    startRound,\n    selectPhotoCard,\n    submitCaptionCard,\n    exchangeCard,\n    selectWinner,\n    restartGame\n  };\n}\n","size_bytes":6901},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-socket.ts":{"content":"import { useEffect, useRef } from 'react';\nimport { socketManager } from '@/lib/socket';\n\nexport function useSocket() {\n  const isConnected = useRef(false);\n\n  useEffect(() => {\n    if (!isConnected.current) {\n      socketManager.connect().then(() => {\n        isConnected.current = true;\n      }).catch((error) => {\n        console.error('Failed to connect to WebSocket:', error);\n      });\n    }\n\n    return () => {\n      // Don't disconnect on unmount to maintain connection across components\n    };\n  }, []);\n\n  const send = (type: string, data: any = {}) => {\n    socketManager.send(type, data);\n  };\n\n  const on = (event: string, callback: Function) => {\n    socketManager.on(event, callback);\n  };\n\n  const off = (event: string, callback: Function) => {\n    socketManager.off(event, callback);\n  };\n\n  return { send, on, off };\n}\n","size_bytes":837},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\";\n\nimport type { ToastActionElement, ToastProps } from \"@/components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 2000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","size_bytes":3950},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/socket.ts":{"content":"export class SocketManager {\n  private socket: WebSocket | null = null;\n  private listeners: Map<string, Function[]> = new Map();\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n  private messageQueue: Array<{ type: string; data: any }> = [];\n  private isConnected = false;\n\n  connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n\n      console.log(\"🔌 Attempting to connect to WebSocket:\", wsUrl);\n      this.socket = new WebSocket(wsUrl);\n\n      this.socket.onopen = () => {\n        console.log(\"✅ Connected to WebSocket successfully\");\n        this.reconnectAttempts = 0;\n        this.isConnected = true;\n        this.emit('connection_status', 'connected');\n\n        // Send any queued messages\n        if (this.messageQueue.length > 0) {\n          console.log(`📦 Sending ${this.messageQueue.length} queued messages`);\n          const queuedMessages = [...this.messageQueue];\n          this.messageQueue = [];\n\n          queuedMessages.forEach(({ type, data }) => {\n            const message = { type, ...data };\n            console.log(\"📤 Sending queued message:\", message);\n            this.socket!.send(JSON.stringify(message));\n            console.log(\"✅ Queued message sent successfully\");\n          });\n        }\n\n        resolve();\n      };\n\n      this.socket.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          console.log(\"📨 WebSocket message received:\", message);\n          this.emit(message.type, message);\n        } catch (error) {\n          console.error(\"❌ Failed to parse WebSocket message:\", error);\n        }\n      };\n\n      this.socket.onclose = (event) => {\n        console.log(\n          \"🔌 WebSocket connection closed:\",\n          event.code,\n          event.reason,\n        );\n        this.socket = null;\n        this.isConnected = false;\n        this.emit('connection_status', 'disconnected');\n        this.handleReconnect();\n      };\n\n      this.socket.onerror = (error) => {\n        console.error(\"❌ WebSocket error:\", error);\n        reject(error);\n      };\n    });\n  }\n\n  private handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      this.emit('connection_status', 'connecting');\n      \n      setTimeout(() => {\n        console.log(\n          `Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`,\n        );\n        this.connect().catch(() => {\n          // Reconnection failed, will try again if attempts remaining\n          if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n            this.emit('connection_status', 'disconnected');\n            console.error('❌ Max reconnection attempts reached. Please refresh the page.');\n          }\n        });\n      }, this.reconnectDelay * this.reconnectAttempts);\n    } else {\n      this.emit('connection_status', 'disconnected');\n    }\n  }\n\n  send(type: string, data: any = {}) {\n    const message = { type, ...data };\n    console.log(\"📤 Sending WebSocket message:\", message);\n\n    if (this.socket?.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(message));\n      console.log(\"✅ Message sent successfully\");\n    } else if (this.socket?.readyState === WebSocket.CONNECTING) {\n      console.log(\"⏳ WebSocket is connecting, queuing message\");\n      this.messageQueue.push({ type, data });\n    } else {\n      console.warn(\n        \"⚠️ WebSocket is not connected, ready state:\",\n        this.socket?.readyState,\n      );\n      console.log(\n        \"WebSocket states: CONNECTING=0, OPEN=1, CLOSING=2, CLOSED=3\",\n      );\n    }\n  }\n\n  on(event: string, callback: Function) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event)!.push(callback);\n  }\n\n  off(event: string, callback: Function) {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      const index = eventListeners.indexOf(callback);\n      if (index > -1) {\n        eventListeners.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: string, data: any) {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      eventListeners.forEach((callback) => callback(data));\n    }\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.listeners.clear();\n  }\n}\n\nexport const socketManager = new SocketManager();\n","size_bytes":4644},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/game.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useGameState } from \"@/hooks/use-game-state\";\nimport { JudgeSelection } from \"@/components/game/judge-selection\";\nimport { GamePlay } from \"@/components/game/game-play\";\nimport { GameEnd } from \"@/components/game/game-end\";\nimport { type Player } from \"@shared/schema\";\n\ninterface GameProps {\n  params: { code: string };\n}\n\nexport default function Game({ params }: GameProps) {\n  const [, setLocation] = useLocation();\n  const [currentPlayer, setCurrentPlayer] = useState<Player | null>(null);\n  const {\n    gameState,\n    setCurrentPlayer: setGameStatePlayer,\n    joinRoom,\n    revealNumberCard,\n    startRound,\n    selectPhotoCard,\n    submitCaptionCard,\n    exchangeCard,\n    selectWinner,\n    restartGame,\n  } = useGameState();\n\n  useEffect(() => {\n    // Get current player from localStorage\n    const storedPlayer = localStorage.getItem(\"currentPlayer\");\n    if (storedPlayer) {\n      const player = JSON.parse(storedPlayer);\n      setCurrentPlayer(player);\n      setGameStatePlayer(player);\n      joinRoom(player.id, player.roomId);\n    } else {\n      // Redirect to home if no player info\n      setLocation(\"/\");\n    }\n  }, []);\n\n  // Update current player when game state changes\n  useEffect(() => {\n    if (gameState && currentPlayer) {\n      const updatedCurrentPlayer = gameState.players.find(\n        (p) => p.id === currentPlayer.id,\n      );\n      if (\n        updatedCurrentPlayer &&\n        JSON.stringify(updatedCurrentPlayer) !== JSON.stringify(currentPlayer)\n      ) {\n        setCurrentPlayer(updatedCurrentPlayer);\n      }\n    }\n  }, [gameState, currentPlayer]);\n\n  const handlePlayAgain = () => {\n    // Reset game state on server - all players will be redirected automatically\n    restartGame();\n    // Note: Don't redirect here, let the game_restarted message handle it for all players\n  };\n\n  const handleNewRoom = () => {\n    // Clear player info and return to home\n    localStorage.removeItem(\"currentPlayer\");\n    localStorage.removeItem(\"playerName\");\n    setLocation(\"/\");\n  };\n\n  if (!gameState || !currentPlayer) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n          <p className=\"text-lg font-semibold text-foreground\">\n            Loading game...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // Check if all players have revealed their number cards\n  const allRevealed = gameState.players.every((p) => p.numberCard !== null);\n\n  // Find judge player (lowest number card)\n  const judgePlayer = allRevealed\n    ? gameState.players.reduce((lowest, player) =>\n        (player.numberCard || 999) < (lowest.numberCard || 999)\n          ? player\n          : lowest,\n      )\n    : null;\n\n  // Calculate game duration (mock for now)\n  const gameTime = \"12:34\";\n\n  if (gameState.room.status === \"finished\") {\n    const winner = gameState.players.find((p) => p.trophies >= 5);\n    if (winner) {\n      return (\n        <GameEnd\n          winner={winner}\n          players={gameState.players}\n          totalRounds={gameState.room.currentRound}\n          gameTime={gameTime}\n          onPlayAgain={handlePlayAgain}\n          onNewRoom={handleNewRoom}\n        />\n      );\n    }\n  }\n\n  if (gameState.room.status === \"selecting_judge\") {\n    return (\n      <JudgeSelection\n        players={gameState.players}\n        currentPlayerId={currentPlayer.id}\n        onRevealCard={revealNumberCard}\n        onStartRound={startRound}\n        allRevealed={allRevealed}\n        judgePlayer={judgePlayer}\n      />\n    );\n  }\n\n  if (gameState.room.status === \"playing\") {\n    return (\n      <GamePlay\n        gameState={gameState}\n        currentPlayerId={currentPlayer.id}\n        onSelectPhotoCard={selectPhotoCard}\n        onSubmitCaptionCard={submitCaptionCard}\n        onExchangeCard={exchangeCard}\n        onSelectWinner={selectWinner}\n      />\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"text-center\">\n        <h1 className=\"text-2xl font-bold text-foreground mb-4\">\n          Game Status: {gameState.room.status}\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Waiting for game state to update...\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4486},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { RulesModal } from \"@/components/game/rules-modal\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, LogIn, HelpCircle, Smile } from \"lucide-react\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [playerName, setPlayerName] = useState(\"\");\n  const [roomCode, setRoomCode] = useState(\"\");\n  const [showRules, setShowRules] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleCreateRoom = async () => {\n    if (!playerName.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"Name required\",\n        description: \"Please enter your name to create a room.\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      // Create room with temporary host ID, then join and update\n      const response = await apiRequest(\"POST\", \"/api/rooms\", {\n        hostId: \"temp-host-id\", // Will be updated when first player joins\n      });\n\n      const { room } = await response.json();\n\n      // Join the room as a player\n      const joinResponse = await apiRequest(\"POST\", `/api/rooms/${room.code}/join`, {\n        name: playerName.trim(),\n        isHost: true // Mark this player as the host\n      });\n\n      const { player } = await joinResponse.json();\n\n      // Store player info in localStorage\n      localStorage.setItem(\"currentPlayer\", JSON.stringify(player));\n      localStorage.setItem(\"playerName\", playerName.trim());\n\n      setLocation(`/lobby/${room.code}`);\n    } catch (error) {\n      toast({\n        variant: \"destructive\", \n        title: \"Failed to create room\",\n        description: \"Please try again.\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleJoinRoom = async () => {\n    if (!playerName.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"Name required\", \n        description: \"Please enter your name to join a room.\"\n      });\n      return;\n    }\n\n    if (!roomCode.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"Room code required\",\n        description: \"Please enter a room code to join.\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await apiRequest(\"POST\", `/api/rooms/${roomCode.trim().toUpperCase()}/join`, {\n        name: playerName.trim()\n      });\n\n      const { player } = await response.json();\n\n      // Store player info in localStorage\n      localStorage.setItem(\"currentPlayer\", JSON.stringify(player));\n      localStorage.setItem(\"playerName\", playerName.trim());\n\n      setLocation(`/lobby/${roomCode.trim().toUpperCase()}`);\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to join room\", \n        description: \"Room not found or game in progress.\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary via-accent to-secondary flex items-center justify-center p-4\">\n      <div className=\"max-w-lg w-full\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-6xl font-bold text-white mb-4\">\n            <Smile className=\"inline mr-3 h-16 w-16\" />\n            Meme Masters\n          </h1>\n          <p className=\"text-xl text-white/90\">The funniest multiplayer card game ever!</p>\n        </div>\n\n        <Card className=\"shadow-2xl\">\n          <CardContent className=\"p-8 space-y-6\">\n            <div className=\"text-center\">\n              <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Join the Fun</h2>\n              <p className=\"text-muted-foreground\">Create a room or join your friends</p>\n            </div>\n\n            {/* Create Room */}\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"playerName\" className=\"block text-sm font-medium text-foreground mb-2\">\n                  Your Name\n                </Label>\n                <Input\n                  id=\"playerName\"\n                  type=\"text\"\n                  placeholder=\"Enter your name\"\n                  value={playerName}\n                  onChange={(e) => setPlayerName(e.target.value)}\n                  className=\"w-full\"\n                  data-testid=\"player-name-input\"\n                />\n              </div>\n\n              <Button\n                onClick={handleCreateRoom}\n                disabled={isLoading}\n                className=\"w-full bg-primary text-primary-foreground py-3 hover:bg-primary/90 transform hover:scale-105\"\n                data-testid=\"create-room-button\"\n              >\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Create New Room\n              </Button>\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-border\"></div>\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-2 bg-card text-muted-foreground\">or</span>\n              </div>\n            </div>\n\n            {/* Join Room */}\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"roomCode\" className=\"block text-sm font-medium text-foreground mb-2\">\n                  Room Code\n                </Label>\n                <Input\n                  id=\"roomCode\"\n                  type=\"text\"\n                  placeholder=\"Enter room code\"\n                  value={roomCode}\n                  onChange={(e) => setRoomCode(e.target.value.toUpperCase())}\n                  className=\"w-full font-mono\"\n                  data-testid=\"room-code-input\"\n                />\n              </div>\n\n              <Button\n                onClick={handleJoinRoom}\n                disabled={isLoading}\n                className=\"w-full bg-accent text-accent-foreground py-3 hover:bg-accent/90\"\n                data-testid=\"join-room-button\"\n              >\n                <LogIn className=\"mr-2 h-4 w-4\" />\n                Join Room\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Game Rules Preview */}\n        <div className=\"mt-8 text-center\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setShowRules(true)}\n            className=\"text-white/80 hover:text-white hover:bg-white/10\"\n            data-testid=\"show-rules-button\"\n          >\n            <HelpCircle className=\"mr-2 h-4 w-4\" />\n            How to Play\n          </Button>\n        </div>\n      </div>\n\n      <RulesModal isOpen={showRules} onClose={() => setShowRules(false)} />\n    </div>\n  );\n}\n","size_bytes":6980},"client/src/pages/lobby.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useSocket } from \"@/hooks/use-socket\";\nimport { useGameState } from \"@/hooks/use-game-state\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type Player } from \"@shared/schema\";\nimport { Copy, Play, Trophy, Info, Users } from \"lucide-react\";\n\ninterface LobbyProps {\n  params: { code: string };\n}\n\nexport default function Lobby({ params }: LobbyProps) {\n  const [, setLocation] = useLocation();\n  const [currentPlayer, setCurrentPlayer] = useState<Player | null>(null);\n  const { gameState, setCurrentPlayer: setGameStatePlayer, joinRoom, startGame } = useGameState();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Get current player from localStorage\n    const storedPlayer = localStorage.getItem(\"currentPlayer\");\n    if (storedPlayer) {\n      const player = JSON.parse(storedPlayer);\n      setCurrentPlayer(player);\n      setGameStatePlayer(player);\n      joinRoom(player.id, player.roomId);\n    } else {\n      // Redirect to home if no player info\n      setLocation(\"/\");\n    }\n  }, []);\n\n  useEffect(() => {\n    if (gameState?.room.status === \"selecting_judge\") {\n      setLocation(`/game/${params.code}`);\n    }\n  }, [gameState?.room.status, params.code, setLocation]);\n\n  const copyRoomCode = async () => {\n    try {\n      await navigator.clipboard.writeText(params.code);\n      toast({\n        title: \"Room code copied!\",\n        description: \"Share this code with your friends.\"\n      });\n    } catch {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to copy\",\n        description: \"Please copy the room code manually.\"\n      });\n    }\n  };\n\n  const handleStartGame = () => {\n    if (!gameState || gameState.players.length < 3) {\n      toast({\n        variant: \"destructive\",\n        title: \"Not enough players\",\n        description: \"At least 3 players are required to start the game.\"\n      });\n      return;\n    }\n    startGame();\n  };\n\n  const isHost = currentPlayer && gameState?.room.hostId === currentPlayer.id;\n  const canStart = gameState && gameState.players.length >= 3;\n\n  if (!gameState || !currentPlayer) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n          <p className=\"text-lg font-semibold text-foreground\">Loading game...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-2\">Game Lobby</h1>\n          <Card className=\"inline-block p-4 bg-muted\">\n            <div className=\"flex items-center space-x-3\">\n              <span className=\"text-sm text-muted-foreground\">Room Code:</span>\n              <span className=\"text-xl font-mono font-semibold text-foreground\" data-testid=\"room-code\">\n                {params.code}\n              </span>\n              <Button\n                onClick={copyRoomCode}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-accent hover:text-accent/80\"\n                data-testid=\"copy-room-code\"\n              >\n                <Copy className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </Card>\n        </div>\n\n        {/* Players Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n          {gameState.players.map((player) => (\n            <Card key={player.id} className=\"shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold text-lg\">\n                    <span data-testid={`player-initials-${player.id}`}>\n                      {player.name.charAt(0).toUpperCase()}\n                    </span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-foreground\" data-testid={`player-name-${player.id}`}>\n                      {player.name}\n                      {player.id === currentPlayer.id && \" (You)\"}\n                      {player.id === gameState.room.hostId && \" (Host)\"}\n                    </h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        {player.isOnline ? \"Ready\" : \"Offline\"}\n                      </span>\n                      <div \n                        className={`w-2 h-2 rounded-full ${player.isOnline ? \"bg-green-500\" : \"bg-gray-400\"}`}\n                        data-testid={`player-status-${player.id}`}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"flex items-center text-secondary\">\n                      <Trophy className=\"h-4 w-4 mr-1\" />\n                      <span className=\"font-semibold\" data-testid={`player-trophies-${player.id}`}>\n                        {player.trophies}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Game Status */}\n        <Card className=\"mb-8 shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground flex items-center\">\n                  <Users className=\"mr-2 h-5 w-5\" />\n                  Game Status\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  <span data-testid=\"player-count\">{gameState.players.length}</span> players joined • \n                  <span className=\"ml-1\">3 minimum required</span>\n                </p>\n              </div>\n              <div className=\"text-right\">\n                {isHost ? (\n                  <Button\n                    onClick={handleStartGame}\n                    disabled={!canStart}\n                    className=\"bg-primary text-primary-foreground px-6 py-3 hover:bg-primary/90 disabled:opacity-50\"\n                    data-testid=\"start-game-button\"\n                  >\n                    <Play className=\"mr-2 h-4 w-4\" />\n                    Start Game\n                  </Button>\n                ) : (\n                  <span className=\"text-muted-foreground\">Waiting for host to start...</span>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Rules Reminder */}\n        <Card className=\"bg-muted\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n              <Info className=\"mr-2 h-5 w-5\" />\n              Quick Rules\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-muted-foreground\">\n              <div>• Judge shows a photo card</div>\n              <div>• Players submit funny captions</div>\n              <div>• Judge picks the funniest</div>\n              <div>• First to 5 trophies wins!</div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7731},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/game/game-end.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { type Player } from \"@shared/schema\";\nimport { Trophy, Plus, RotateCw } from \"lucide-react\";\n\ninterface GameEndProps {\n  winner: Player;\n  players: Player[];\n  totalRounds: number;\n  gameTime: string;\n  onPlayAgain: () => void;\n  onNewRoom: () => void;\n}\n\nexport function GameEnd({\n  winner,\n  players,\n  totalRounds,\n  gameTime,\n  onPlayAgain,\n  onNewRoom\n}: GameEndProps) {\n  const sortedPlayers = [...players].sort((a, b) => b.trophies - a.trophies);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-secondary via-primary to-accent flex items-center justify-center p-4\">\n      <div className=\"max-w-2xl w-full text-center\">\n        {/* Confetti Animation */}\n        <div className=\"mb-8\">\n          <div className=\"text-8xl mb-4\">🎉</div>\n          <h1 className=\"text-6xl font-bold text-white mb-4\" data-testid=\"winner-name\">\n            {winner.name} Wins!\n          </h1>\n          <p className=\"text-2xl text-white/90\">The Meme Master Champion!</p>\n        </div>\n\n        {/* Winner Stats */}\n        <Card className=\"bg-white/10 backdrop-blur-lg border-white/20 mb-8\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center justify-center mb-6\">\n              <div className=\"w-24 h-24 bg-white rounded-full flex items-center justify-center text-4xl font-bold text-primary\">\n                <span data-testid=\"winner-initials\">\n                  {winner.name.charAt(0).toUpperCase()}\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-3 gap-6 text-white\">\n              <div>\n                <div className=\"text-3xl font-bold flex items-center justify-center\">\n                  <Trophy className=\"trophy-icon mr-2 h-8 w-8\" />\n                  <span data-testid=\"winner-trophies\">{winner.trophies}</span>\n                </div>\n                <div className=\"text-sm opacity-80\">Trophies</div>\n              </div>\n              <div>\n                <div className=\"text-3xl font-bold\" data-testid=\"total-rounds\">{totalRounds}</div>\n                <div className=\"text-sm opacity-80\">Rounds Played</div>\n              </div>\n              <div>\n                <div className=\"text-3xl font-bold\" data-testid=\"game-time\">{gameTime}</div>\n                <div className=\"text-sm opacity-80\">Game Time</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Final Scoreboard */}\n        <Card className=\"bg-white/10 backdrop-blur-lg border-white/20 mb-8\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-semibold text-white mb-4\">Final Scores</h3>\n            <div className=\"space-y-3\">\n              {sortedPlayers.map((player, index) => (\n                <div\n                  key={player.id}\n                  className=\"flex items-center justify-between bg-white/10 rounded-lg p-3\"\n                  data-testid={`final-score-${player.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-white font-bold text-lg\">#{index + 1}</span>\n                    <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold\">\n                      <span>{player.name.charAt(0).toUpperCase()}</span>\n                    </div>\n                    <span className=\"text-white font-medium\">{player.name}</span>\n                  </div>\n                  <div className=\"flex items-center text-white\">\n                    <Trophy className=\"trophy-icon mr-2 h-5 w-5\" />\n                    <span className=\"font-bold text-lg\">{player.trophies}</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button\n            onClick={onPlayAgain}\n            className=\"bg-white text-primary px-8 py-4 text-lg hover:bg-white/90\"\n            data-testid=\"play-again-button\"\n          >\n            <RotateCw className=\"mr-2 h-5 w-5\" />\n            Play Again\n          </Button>\n          <Button\n            onClick={onNewRoom}\n            variant=\"outline\"\n            className=\"bg-primary/20 text-white border-2 border-white/30 px-8 py-4 text-lg hover:bg-white/10\"\n            data-testid=\"new-room-button\"\n          >\n            <Plus className=\"mr-2 h-5 w-5\" />\n            New Room\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4696},"client/src/components/game/game-play.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { type Player, type GameState, type CaptionCard, type PhotoCard } from \"@shared/schema\";\nimport { Trophy, Gavel, NotebookPen, RotateCcw, Check, Medal } from \"lucide-react\";\nimport { WinnerAnnouncement } from \"./winner-announcement\";\nimport { cn } from \"@/lib/utils\";\n\ninterface GamePlayProps {\n  gameState: GameState;\n  currentPlayerId: string;\n  onSelectPhotoCard: (cardId: string) => void;\n  onSubmitCaptionCard: (cardId: string) => void;\n  onExchangeCard: (cardId: string) => void;\n  onSelectWinner: (winnerId: string) => void;\n}\n\nexport function GamePlay({\n  gameState,\n  currentPlayerId,\n  onSelectPhotoCard,\n  onSubmitCaptionCard,\n  onExchangeCard,\n  onSelectWinner\n}: GamePlayProps) {\n  const [selectedCardId, setSelectedCardId] = useState<string | null>(null);\n  const [exchangeCardId, setExchangeCardId] = useState<string | null>(null);\n  const [availablePhotoCards, setAvailablePhotoCards] = useState<PhotoCard[]>([]);\n  const [showWinner, setShowWinner] = useState<{winner: Player, caption: string} | null>(null);\n\n  const currentPlayer = gameState.players.find(p => p.id === currentPlayerId);\n  const isJudge = gameState.room.currentJudgeId === currentPlayerId;\n  const judgePlayer = gameState.players.find(p => p.id === gameState.room.currentJudgeId);\n  \n  const playerHand: CaptionCard[] = currentPlayer ? JSON.parse(currentPlayer.hand as string) : [];\n  const selectedPhotoCard: PhotoCard | null = gameState.room.selectedPhotoCard \n    ? JSON.parse(gameState.room.selectedPhotoCard as string) \n    : null;\n  const submittedCards = JSON.parse(gameState.room.submittedCards as string);\n\n  // Fetch available photo cards for judge\n  useEffect(() => {\n    if (isJudge && !selectedPhotoCard) {\n      fetchPhotoCards();\n    }\n  }, [isJudge, selectedPhotoCard]);\n\n  const fetchPhotoCards = async () => {\n    try {\n      const response = await fetch('/api/cards/photo');\n      if (response.ok) {\n        const cards = await response.json();\n        const shuffled = cards.sort(() => 0.5 - Math.random());\n        const selectedCards = shuffled.slice(0, 6).map((card: any) => ({\n          id: card.id,\n          imageUrl: card.imageUrl,\n          description: card.description\n        }));\n        setAvailablePhotoCards(selectedCards);\n      }\n    } catch (error) {\n      console.error('Failed to fetch photo cards:', error);\n    }\n  };\n\n  const handleCardSelection = (cardId: string) => {\n    setSelectedCardId(selectedCardId === cardId ? null : cardId);\n  };\n\n  const handleExchangeSelection = (cardId: string) => {\n    setExchangeCardId(exchangeCardId === cardId ? null : cardId);\n  };\n\n  const handleSubmitCard = () => {\n    if (selectedCardId) {\n      onSubmitCaptionCard(selectedCardId);\n      setSelectedCardId(null);\n    }\n  };\n\n  const handleExchangeCard = () => {\n    if (exchangeCardId && currentPlayer && !currentPlayer.hasExchangedCard) {\n      onExchangeCard(exchangeCardId);\n      setExchangeCardId(null);\n    }\n  };\n\n  const allPlayersSubmitted = gameState.players\n    .filter(p => p.id !== gameState.room.currentJudgeId)\n    .every(p => p.hasSubmittedCard);\n\n  return (\n    <>\n      {showWinner && (\n        <WinnerAnnouncement\n          winner={showWinner.winner}\n          winningCaption={showWinner.caption}\n          onComplete={() => setShowWinner(null)}\n        />\n      )}\n      \n      <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 shadow-lg sticky top-0 z-40\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-8\">\n              <div className=\"bg-white/20 backdrop-blur-sm rounded-2xl px-4 py-2\">\n                <h1 className=\"text-2xl font-bold text-white\">\n                  Round <span data-testid=\"current-round\">{gameState.room.currentRound}</span>\n                </h1>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-blue-100 font-medium\">Judge:</span>\n                <div className=\"flex items-center space-x-3 bg-white/20 backdrop-blur-sm rounded-full px-4 py-2\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-amber-400 to-orange-500 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg\">\n                    <span data-testid=\"judge-initials\">\n                      {judgePlayer?.name.charAt(0).toUpperCase()}\n                    </span>\n                  </div>\n                  <span className=\"font-semibold text-white\" data-testid=\"judge-name\">\n                    {judgePlayer?.name}\n                  </span>\n                  <Gavel className=\"w-5 h-5 text-amber-300\" />\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-6\">\n              {gameState.players.map((player, index) => (\n                <div key={player.id} className=\"flex items-center space-x-3 bg-white/20 backdrop-blur-sm rounded-2xl px-4 py-3 transition-all hover:bg-white/30\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={cn(\n                      \"w-3 h-3 rounded-full\",\n                      index === 0 ? \"bg-amber-400\" : index === 1 ? \"bg-gray-300\" : \"bg-orange-400\"\n                    )} />\n                    <span className=\"text-sm text-white font-medium\" data-testid={`player-name-${player.id}`}>\n                      {player.name}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center text-amber-300 bg-black/20 rounded-full px-3 py-1\">\n                    <Trophy className=\"h-4 w-4 mr-1\" />\n                    <span className=\"font-bold text-sm\" data-testid={`player-trophies-${player.id}`}>\n                      {player.trophies}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900\">\n        <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n          <div className=\"text-center mb-12\">\n            <div className=\"inline-block bg-white dark:bg-slate-800 rounded-3xl p-8 shadow-2xl border border-slate-200 dark:border-slate-700\">\n              <div className=\"flex items-center justify-center space-x-2 mb-6\">\n                <div className=\"w-3 h-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full\" />\n                <h2 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">Photo Card</h2>\n                <div className=\"w-3 h-3 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full\" />\n              </div>\n              \n              {isJudge && !selectedPhotoCard && (\n                <div data-testid=\"photo-selection\">\n                  <p className=\"text-slate-600 dark:text-slate-300 mb-6 text-lg\">Choose a photo card for this round:</p>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-6 max-w-4xl\">\n                    {availablePhotoCards.map((card) => (\n                      <div\n                        key={card.id}\n                        onClick={() => onSelectPhotoCard(card.id)}\n                        className=\"relative group cursor-pointer transform transition-all duration-300 hover:scale-105 hover:-translate-y-2\"\n                        data-testid={`photo-card-option-${card.id}`}\n                      >\n                        <div className=\"bg-gradient-to-br from-slate-900 to-slate-800 rounded-2xl p-4 shadow-2xl border border-slate-700 hover:border-blue-400 transition-all duration-300\">\n                          <div className=\"relative overflow-hidden rounded-xl mb-3\">\n                            <img \n                              src={card.imageUrl} \n                              alt={card.description}\n                              className=\"w-full h-40 object-cover transition-transform duration-300 group-hover:scale-110\"\n                            />\n                            <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                          </div>\n                          <p className=\"text-sm text-slate-300 font-medium text-center leading-tight\">{card.description}</p>\n                          <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-blue-500 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center\">\n                            <Check className=\"w-4 h-4 text-white\" />\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {selectedPhotoCard && (\n                <div data-testid=\"selected-photo-card\" className=\"relative\">\n                  <div className=\"bg-gradient-to-br from-slate-900 to-slate-800 rounded-2xl p-6 shadow-2xl border border-slate-700 max-w-lg mx-auto\">\n                    <div className=\"relative overflow-hidden rounded-xl mb-4\">\n                      <img \n                        src={selectedPhotoCard.imageUrl} \n                        alt={selectedPhotoCard.description}\n                        className=\"w-full h-64 object-cover\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/30 to-transparent\" />\n                    </div>\n                    <p className=\"text-white font-medium text-center text-lg leading-relaxed\">\n                      {selectedPhotoCard.description}\n                    </p>\n                    <div className=\"mt-3 text-center\">\n                      <span className=\"text-xs text-slate-400 font-mono uppercase tracking-wider\">Photo Card</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {!isJudge && selectedPhotoCard && (\n              <div className=\"lg:col-span-2\">\n                <Card className=\"p-6 shadow-lg\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h3 className=\"text-xl font-semibold text-foreground\">Your Caption Cards</h3>\n                    <div className=\"text-sm text-muted-foreground\">\n                      <span data-testid=\"hand-count\">{playerHand.length}</span> cards\n                    </div>\n                  </div>\n\n                  {currentPlayer && !currentPlayer.hasExchangedCard && (\n                    <div className=\"mb-6 bg-muted rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium text-foreground\">Card Exchange</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Trade one card for a new one (once per round)\n                          </p>\n                        </div>\n                        <Button\n                          onClick={handleExchangeCard}\n                          disabled={!exchangeCardId}\n                          className=\"bg-accent text-accent-foreground hover:bg-accent/90 disabled:opacity-50\"\n                          data-testid=\"exchange-card-button\"\n                        >\n                          <RotateCcw className=\"mr-2 h-4 w-4\" />\n                          Exchange\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {playerHand.map((card) => (\n                      <div\n                        key={card.id}\n                        onClick={() => {\n                          if (!currentPlayer?.hasSubmittedCard) {\n                            if (currentPlayer && !currentPlayer.hasExchangedCard) {\n                              if (exchangeCardId) {\n                                handleExchangeSelection(card.id);\n                              } else {\n                                handleCardSelection(card.id);\n                              }\n                            } else {\n                              handleCardSelection(card.id);\n                            }\n                          }\n                        }}\n                        className={cn(\n                          \"relative group cursor-pointer transform transition-all duration-300 hover:scale-105 hover:-translate-y-2\",\n                          currentPlayer?.hasSubmittedCard && \"opacity-50 cursor-not-allowed\"\n                        )}\n                        data-testid={`caption-card-${card.id}`}\n                      >\n                        <div className={cn(\n                          \"bg-gradient-to-br from-slate-900 to-slate-800 rounded-2xl p-6 shadow-2xl border-2 transition-all duration-300 min-h-[160px] flex flex-col justify-between\",\n                          selectedCardId === card.id ? \"border-green-400 bg-gradient-to-br from-green-900/20 to-slate-800\" : \"border-slate-700 hover:border-blue-400\",\n                          exchangeCardId === card.id && \"border-orange-400 bg-gradient-to-br from-orange-900/20 to-slate-800\"\n                        )}>\n                          <div className=\"flex-1 flex items-center justify-center\">\n                            <p className=\"text-white font-medium text-center leading-relaxed\">{card.text}</p>\n                          </div>\n                          \n                          <div className=\"mt-4 flex items-center justify-between\">\n                            <div className=\"text-xs text-slate-400 font-mono uppercase tracking-wider\">Caption Card</div>\n                            <div className=\"flex items-center space-x-2\">\n                              {selectedCardId === card.id && (\n                                <div className=\"flex items-center space-x-1 text-green-400\">\n                                  <Check className=\"h-4 w-4\" data-testid=\"card-selected-icon\" />\n                                  <span className=\"text-xs font-medium\">Selected</span>\n                                </div>\n                              )}\n                              {exchangeCardId === card.id && (\n                                <div className=\"flex items-center space-x-1 text-orange-400\">\n                                  <RotateCcw className=\"h-4 w-4\" data-testid=\"card-exchange-icon\" />\n                                  <span className=\"text-xs font-medium\">Exchange</span>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                          \n                          <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500/10 to-purple-500/10 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\" />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n\n                  {!currentPlayer?.hasSubmittedCard && (\n                    <div className=\"mt-6 text-center\">\n                      <Button\n                        onClick={handleSubmitCard}\n                        disabled={!selectedCardId}\n                        className=\"bg-primary text-primary-foreground px-8 py-3 hover:bg-primary/90 disabled:opacity-50\"\n                        data-testid=\"submit-caption-button\"\n                      >\n                        <NotebookPen className=\"mr-2 h-4 w-4\" />\n                        Submit Caption\n                      </Button>\n                    </div>\n                  )}\n                </Card>\n              </div>\n            )}\n\n            <div className=\"space-y-6\">\n              <Card className=\"p-6 shadow-lg\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Round Status</h3>\n                <div className=\"space-y-3\">\n                  {gameState.players\n                    .filter(p => p.id !== gameState.room.currentJudgeId)\n                    .map((player) => (\n                      <div key={player.id} className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-foreground\" data-testid={`player-status-${player.id}`}>\n                          {player.name}\n                        </span>\n                        <div data-testid={`submission-status-${player.id}`}>\n                          {player.hasSubmittedCard ? (\n                            <Check className=\"h-4 w-4 text-green-500\" />\n                          ) : (\n                            <div className=\"w-4 h-4 border-2 border-muted rounded-full\" />\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              </Card>\n\n              {isJudge && allPlayersSubmitted && (\n                <Card className=\"p-6 shadow-lg\" data-testid=\"judge-review\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n                    <Gavel className=\"inline mr-2 h-5 w-5\" />\n                    Judge's Decision\n                  </h3>\n                  \n                  <div className=\"space-y-4\">\n                    {submittedCards.map((card: any, index: number) => (\n                      <div\n                        key={index}\n                        onClick={() => onSelectWinner(card.playerId)}\n                        className=\"relative group cursor-pointer transform transition-all duration-300 hover:scale-102\"\n                        data-testid={`submitted-card-${index}`}\n                      >\n                        <div className=\"bg-gradient-to-br from-slate-900 to-slate-800 rounded-xl p-5 shadow-xl border border-slate-700 hover:border-yellow-400 transition-all duration-300\">\n                          <p className=\"text-white font-medium leading-relaxed mb-3\">{card.text}</p>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"text-xs text-slate-400 font-mono uppercase tracking-wider\">Anonymous Submission</div>\n                            <div className=\"text-xs text-yellow-400 font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                              Click to select winner\n                            </div>\n                          </div>\n                          <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-500/10 to-orange-500/10 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\" />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </Card>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":19272},"client/src/components/game/judge-selection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { type Player } from \"@shared/schema\";\nimport { Eye, Crown, Sparkles } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface JudgeSelectionProps {\n  players: Player[];\n  currentPlayerId: string;\n  onRevealCard: () => void;\n  onStartRound: () => void;\n  allRevealed: boolean;\n  judgePlayer: Player | null;\n}\n\nexport function JudgeSelection({ \n  players, \n  currentPlayerId, \n  onRevealCard, \n  onStartRound, \n  allRevealed, \n  judgePlayer \n}: JudgeSelectionProps) {\n  const currentPlayer = players.find(p => p.id === currentPlayerId);\n  const hasRevealed = currentPlayer?.numberCard !== null;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-50 via-blue-50 to-purple-50 dark:from-slate-900 dark:via-blue-900 dark:to-purple-900\">\n      {/* Material Design Header */}\n      <div className=\"bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 shadow-2xl\">\n        <div className=\"container mx-auto px-4 py-12\">\n          <div className=\"text-center text-white\">\n            <div className=\"flex items-center justify-center space-x-3 mb-4\">\n              <Sparkles className=\"w-8 h-8 text-amber-300 animate-pulse\" />\n              <h1 className=\"text-5xl font-bold drop-shadow-lg\">Who Goes First?</h1>\n              <Sparkles className=\"w-8 h-8 text-amber-300 animate-pulse\" />\n            </div>\n            <p className=\"text-2xl text-blue-100 font-medium max-w-2xl mx-auto leading-relaxed\">\n              Everyone gets a number card. Lowest number becomes the first Judge!\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-12 max-w-6xl\">\n\n        {/* Material Design Cards Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-12\">\n          {players.map((player, index) => (\n            <div key={player.id} className=\"text-center\">\n              {/* Player Header */}\n              <div className=\"bg-white dark:bg-slate-800 rounded-2xl p-4 mb-6 shadow-xl border border-slate-200 dark:border-slate-700\">\n                <div className=\"flex items-center justify-center space-x-2 mb-2\">\n                  <div className={cn(\n                    \"w-3 h-3 rounded-full\",\n                    index === 0 ? \"bg-gradient-to-r from-amber-400 to-orange-500\" :\n                    index === 1 ? \"bg-gradient-to-r from-blue-400 to-indigo-500\" :\n                    index === 2 ? \"bg-gradient-to-r from-green-400 to-emerald-500\" :\n                    \"bg-gradient-to-r from-purple-400 to-pink-500\"\n                  )} />\n                  <h3 className=\"text-xl font-bold text-slate-800 dark:text-white\" data-testid={`player-name-${player.id}`}>\n                    {player.name}\n                  </h3>\n                  <div className={cn(\n                    \"w-3 h-3 rounded-full\",\n                    index === 0 ? \"bg-gradient-to-r from-amber-400 to-orange-500\" :\n                    index === 1 ? \"bg-gradient-to-r from-blue-400 to-indigo-500\" :\n                    index === 2 ? \"bg-gradient-to-r from-green-400 to-emerald-500\" :\n                    \"bg-gradient-to-r from-purple-400 to-pink-500\"\n                  )} />\n                </div>\n                <div className=\"text-sm text-slate-500 dark:text-slate-400\">\n                  {hasRevealed && player.id === currentPlayerId ? \"Card Revealed!\" : \"Waiting...\"}\n                </div>\n              </div>\n              \n              {/* Enhanced Card Flip Animation */}\n              <div className={cn(\n                \"card-flip mx-auto w-40 h-56 drop-shadow-2xl\",\n                player.numberCard !== null && \"flipped\"\n              )}>\n                <div className=\"card-flip-inner relative w-full h-full\">\n                  {/* Card Back - Material Design */}\n                  <div className=\"card-flip-front absolute inset-0 bg-gradient-to-br from-slate-800 via-slate-700 to-slate-900 rounded-2xl border border-slate-600 shadow-2xl flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <div className=\"text-6xl text-slate-400 mb-2\">?</div>\n                      <div className=\"text-sm text-slate-400 font-mono uppercase tracking-wider\">Mystery Card</div>\n                    </div>\n                  </div>\n                  {/* Card Front - Material Design */}\n                  <div className=\"card-flip-back absolute inset-0 bg-gradient-to-br from-white to-slate-100 dark:from-slate-100 dark:to-white rounded-2xl border-2 border-blue-500 shadow-2xl flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <span className=\"text-8xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent drop-shadow-lg\" data-testid={`number-card-${player.id}`}>\n                        {player.numberCard}\n                      </span>\n                      <div className=\"text-sm text-slate-600 font-mono uppercase tracking-wider mt-2\">Number Card</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Material Design Reveal Button */}\n        {!allRevealed && !hasRevealed && (\n          <div className=\"text-center mb-12\">\n            <div className=\"bg-white dark:bg-slate-800 rounded-3xl p-8 shadow-2xl border border-slate-200 dark:border-slate-700 max-w-md mx-auto\">\n              <div className=\"mb-6\">\n                <Eye className=\"w-16 h-16 text-blue-500 mx-auto mb-4 animate-bounce\" />\n                <p className=\"text-lg text-slate-600 dark:text-slate-300 font-medium\">\n                  Ready to reveal your number?\n                </p>\n              </div>\n              <Button\n                onClick={onRevealCard}\n                className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-12 py-4 text-xl font-bold rounded-2xl shadow-xl transform transition-all duration-200 hover:scale-105 hover:shadow-2xl\"\n                data-testid=\"reveal-card-button\"\n              >\n                <Eye className=\"mr-3 h-6 w-6\" />\n                Reveal My Card\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Material Design Judge Announcement */}\n        {allRevealed && judgePlayer && (\n          <div className=\"relative\" data-testid=\"judge-announcement\">\n            {/* Celebration Background */}\n            <div className=\"absolute inset-0 bg-gradient-to-r from-amber-100 via-yellow-50 to-amber-100 dark:from-amber-900/30 dark:via-yellow-900/20 dark:to-amber-900/30 rounded-3xl animate-pulse\" />\n            \n            {/* Main Announcement Card */}\n            <div className=\"relative bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm rounded-3xl p-12 text-center shadow-2xl border border-amber-200 dark:border-amber-700\">\n              {/* Floating Crown Animation */}\n              <div className=\"relative mb-8\">\n                <Crown className=\"w-20 h-20 text-amber-500 mx-auto animate-bounce drop-shadow-lg\" />\n                <div className=\"absolute -top-2 -left-2 w-6 h-6 bg-yellow-400 rounded-full animate-ping\" />\n                <div className=\"absolute -top-2 -right-2 w-4 h-4 bg-amber-400 rounded-full animate-ping delay-300\" />\n              </div>\n              \n              {/* Winner Announcement */}\n              <div className=\"mb-8\">\n                <h2 className=\"text-5xl font-bold bg-gradient-to-r from-amber-600 via-yellow-500 to-amber-600 bg-clip-text text-transparent mb-4 drop-shadow-sm\">\n                  {judgePlayer.name}\n                </h2>\n                <div className=\"text-3xl font-bold text-slate-700 dark:text-slate-200 mb-2\">\n                  is the First Judge!\n                </div>\n                <div className=\"inline-flex items-center space-x-2 bg-gradient-to-r from-amber-500 to-yellow-500 text-white px-6 py-3 rounded-2xl font-bold text-lg shadow-lg\">\n                  <span>Lowest Number:</span>\n                  <span className=\"text-2xl\">{judgePlayer.numberCard}</span>\n                </div>\n              </div>\n              \n              {/* Celebration Elements */}\n              <div className=\"flex items-center justify-center space-x-4 mb-8 text-4xl\">\n                <span className=\"animate-bounce\">🎉</span>\n                <span className=\"animate-bounce delay-100\">👑</span>\n                <span className=\"animate-bounce delay-200\">🎉</span>\n              </div>\n              \n              {/* Start Button */}\n              <Button\n                onClick={onStartRound}\n                className=\"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white px-12 py-6 text-2xl font-bold rounded-2xl shadow-2xl transform transition-all duration-200 hover:scale-105 hover:shadow-3xl\"\n                data-testid=\"start-round-button\"\n              >\n                <Crown className=\"mr-4 h-8 w-8\" />\n                Start Round 1\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9166},"client/src/components/game/rules-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Settings, Play, Lightbulb, Trophy } from \"lucide-react\";\n\ninterface RulesModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function RulesModal({ isOpen, onClose }: RulesModalProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"rules-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-3xl font-bold text-foreground\">\n            How to Play Meme Masters\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mt-6\">\n          {/* Setup */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-xl font-semibold text-foreground flex items-center\">\n              <Settings className=\"text-primary mr-3 h-5 w-5\" />\n              Setup\n            </h3>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li>• 3+ players needed to start</li>\n              <li>• Everyone gets a number card</li>\n              <li>• Lowest number becomes first Judge</li>\n              <li>• Players get 4 cards (3 players) or 7 cards (4+ players)</li>\n            </ul>\n          </div>\n\n          {/* Gameplay */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-xl font-semibold text-foreground flex items-center\">\n              <Play className=\"text-accent mr-3 h-5 w-5\" />\n              Gameplay\n            </h3>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li>• Judge picks a photo card</li>\n              <li>• Players submit funny caption cards</li>\n              <li>• Judge chooses the funniest caption</li>\n              <li>• Winner gets the photo as a trophy</li>\n            </ul>\n          </div>\n\n          {/* Strategy */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-xl font-semibold text-foreground flex items-center\">\n              <Lightbulb className=\"text-secondary mr-3 h-5 w-5\" />\n              Strategy Tips\n            </h3>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li>• Exchange 1 card per round for better options</li>\n              <li>• Know your judge's sense of humor</li>\n              <li>• Sometimes absurd beats clever</li>\n              <li>• Judge role rotates clockwise</li>\n            </ul>\n          </div>\n\n          {/* Winning */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-xl font-semibold text-foreground flex items-center\">\n              <Trophy className=\"text-secondary mr-3 h-5 w-5\" />\n              Winning\n            </h3>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li>• First to 5 trophies wins!</li>\n              <li>• Hands refill after each round</li>\n              <li>• Game can go for many rounds</li>\n              <li>• May the funniest player win!</li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"mt-8 text-center\">\n          <Button \n            onClick={onClose} \n            className=\"bg-primary text-primary-foreground px-8 py-3 hover:bg-primary/90\"\n            data-testid=\"rules-got-it-button\"\n          >\n            Got It!\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3474},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast-notifications.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\";\nimport { CheckCircle, XCircle, Info, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport function ToastNotifications() {\n  const { toasts, dismiss } = useToast();\n\n  if (toasts.length === 0) return null;\n\n  return (\n    <div className=\"fixed top-4 right-4 z-50 space-y-3\">\n      {toasts.map((toast) => (\n        <div\n          key={toast.id}\n          className={cn(\n            \"bg-card border border-border rounded-lg shadow-lg p-4 max-w-sm transform transition-all duration-300\",\n            \"floating-ui\"\n          )}\n        >\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"flex-shrink-0 mt-0.5\">\n              {toast.variant === \"default\" && (\n                <CheckCircle className=\"h-4 w-4 text-green-500\" data-testid=\"toast-success-icon\" />\n              )}\n              {toast.variant === \"destructive\" && (\n                <XCircle className=\"h-4 w-4 text-red-500\" data-testid=\"toast-error-icon\" />\n              )}\n              {!toast.variant && (\n                <Info className=\"h-4 w-4 text-blue-500\" data-testid=\"toast-info-icon\" />\n              )}\n            </div>\n            <div className=\"flex-1\">\n              {toast.title && (\n                <p className=\"text-sm font-medium text-foreground\" data-testid=\"toast-title\">\n                  {toast.title}\n                </p>\n              )}\n              {toast.description && (\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"toast-description\">\n                  {toast.description}\n                </p>\n              )}\n            </div>\n            <button\n              onClick={() => dismiss(toast.id)}\n              className=\"flex-shrink-0 text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"toast-dismiss\"\n            >\n              <X className=\"h-4 w-4\" />\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1993},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 right-0 z-[100] flex max-h-screen w-full flex-col p-4 md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4798},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/game/game-play-broken.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { type Player, type GameState, type CaptionCard, type PhotoCard } from \"@shared/schema\";\nimport { Trophy, Gavel, NotebookPen, RotateCcw, Check, Medal } from \"lucide-react\";\nimport { WinnerAnnouncement } from \"./winner-announcement\";\nimport { cn } from \"@/lib/utils\";\n\ninterface GamePlayProps {\n  gameState: GameState;\n  currentPlayerId: string;\n  onSelectPhotoCard: (cardId: string) => void;\n  onSubmitCaptionCard: (cardId: string) => void;\n  onExchangeCard: (cardId: string) => void;\n  onSelectWinner: (winnerId: string) => void;\n}\n\nexport function GamePlay({\n  gameState,\n  currentPlayerId,\n  onSelectPhotoCard,\n  onSubmitCaptionCard,\n  onExchangeCard,\n  onSelectWinner\n}: GamePlayProps) {\n  const [selectedCardId, setSelectedCardId] = useState<string | null>(null);\n  const [exchangeCardId, setExchangeCardId] = useState<string | null>(null);\n  const [availablePhotoCards, setAvailablePhotoCards] = useState<PhotoCard[]>([]);\n  const [showWinner, setShowWinner] = useState<{winner: Player, caption: string} | null>(null);\n\n  const currentPlayer = gameState.players.find(p => p.id === currentPlayerId);\n  const isJudge = gameState.room.currentJudgeId === currentPlayerId;\n  const judgePlayer = gameState.players.find(p => p.id === gameState.room.currentJudgeId);\n  \n  const playerHand: CaptionCard[] = currentPlayer ? JSON.parse(currentPlayer.hand as string) : [];\n  const selectedPhotoCard: PhotoCard | null = gameState.room.selectedPhotoCard \n    ? JSON.parse(gameState.room.selectedPhotoCard as string) \n    : null;\n  const submittedCards = JSON.parse(gameState.room.submittedCards as string);\n  \n  // Fetch available photo cards for judge\n  useEffect(() => {\n    if (isJudge && !selectedPhotoCard) {\n      fetchPhotoCards();\n    }\n  }, [isJudge, selectedPhotoCard]);\n\n  // Listen for round winner announcements  \n  useEffect(() => {\n    const handleWinnerSelected = (data: any) => {\n      if (data.winner) {\n        setShowWinner({\n          winner: data.winner,\n          caption: data.winningCaption || \"Great meme!\"\n        });\n      }\n    };\n\n    // This would typically come from WebSocket, but for now we'll handle it in the parent\n    // The parent component should pass winner data when available\n  }, []);\n\n  const fetchPhotoCards = async () => {\n    try {\n      const response = await fetch('/api/cards/photo');\n      if (response.ok) {\n        const cards = await response.json();\n        // Get 6 random photo cards for selection\n        const shuffled = cards.sort(() => 0.5 - Math.random());\n        const selectedCards = shuffled.slice(0, 6).map((card: any) => ({\n          id: card.id,\n          imageUrl: card.imageUrl,\n          description: card.description\n        }));\n        setAvailablePhotoCards(selectedCards);\n      }\n    } catch (error) {\n      console.error('Failed to fetch photo cards:', error);\n    }\n  };\n\n  const handleCardSelection = (cardId: string) => {\n    setSelectedCardId(selectedCardId === cardId ? null : cardId);\n  };\n\n  const handleExchangeSelection = (cardId: string) => {\n    setExchangeCardId(exchangeCardId === cardId ? null : cardId);\n  };\n\n  const handleSubmitCard = () => {\n    if (selectedCardId) {\n      onSubmitCaptionCard(selectedCardId);\n      setSelectedCardId(null);\n    }\n  };\n\n  const handleExchangeCard = () => {\n    if (exchangeCardId && currentPlayer && !currentPlayer.hasExchangedCard) {\n      onExchangeCard(exchangeCardId);\n      setExchangeCardId(null);\n    }\n  };\n\n  const allPlayersSubmitted = gameState.players\n    .filter(p => p.id !== gameState.room.currentJudgeId)\n    .every(p => p.hasSubmittedCard);\n\n  return (\n    <>\n      {/* Winner Announcement Overlay */}\n      {showWinner && (\n        <WinnerAnnouncement\n          winner={showWinner.winner}\n          winningCaption={showWinner.caption}\n          onComplete={() => setShowWinner(null)}\n        />\n      )}\n      \n      {/* Top Navigation - Material Design */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 shadow-lg sticky top-0 z-40\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-8\">\n              <div className=\"bg-white/20 backdrop-blur-sm rounded-2xl px-4 py-2\">\n                <h1 className=\"text-2xl font-bold text-white\">\n                  Round <span data-testid=\"current-round\">{gameState.room.currentRound}</span>\n                </h1>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-blue-100 font-medium\">Judge:</span>\n                <div className=\"flex items-center space-x-3 bg-white/20 backdrop-blur-sm rounded-full px-4 py-2\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-amber-400 to-orange-500 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg\">\n                    <span data-testid=\"judge-initials\">\n                      {judgePlayer?.name.charAt(0).toUpperCase()}\n                    </span>\n                  </div>\n                  <span className=\"font-semibold text-white\" data-testid=\"judge-name\">\n                    {judgePlayer?.name}\n                  </span>\n                  <Gavel className=\"w-5 h-5 text-amber-300\" />\n                </div>\n              </div>\n            </div>\n            \n            {/* Scoreboard - Material Design */}\n            <div className=\"flex items-center space-x-6\">\n              {gameState.players.map((player, index) => (\n                <div key={player.id} className=\"flex items-center space-x-3 bg-white/20 backdrop-blur-sm rounded-2xl px-4 py-3 transition-all hover:bg-white/30\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={cn(\n                      \"w-3 h-3 rounded-full\",\n                      index === 0 ? \"bg-amber-400\" : index === 1 ? \"bg-gray-300\" : \"bg-orange-400\"\n                    )} />\n                    <span className=\"text-sm text-white font-medium\" data-testid={`player-name-${player.id}`}>\n                      {player.name}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center text-amber-300 bg-black/20 rounded-full px-3 py-1\">\n                    <Trophy className=\"h-4 w-4 mr-1\" />\n                    <span className=\"font-bold text-sm\" data-testid={`player-trophies-${player.id}`}>\n                      {player.trophies}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900\">\n        <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n          {/* Photo Card Display - Material Design */}\n          <div className=\"text-center mb-12\">\n            <div className=\"inline-block bg-white dark:bg-slate-800 rounded-3xl p-8 shadow-2xl border border-slate-200 dark:border-slate-700\">\n              <div className=\"p-0\">\n                <div className=\"flex items-center justify-center space-x-2 mb-6\">\n                  <div className=\"w-3 h-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full\" />\n                  <h2 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">Photo Card</h2>\n                  <div className=\"w-3 h-3 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full\" />\n                </div>\n              \n              {/* Judge selects photo (only visible to judge) */}\n              {isJudge && !selectedPhotoCard && (\n                <div data-testid=\"photo-selection\">\n                  <p className=\"text-muted-foreground mb-4\">Choose a photo card for this round:</p>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-6 max-w-4xl\">\n                    {availablePhotoCards.map((card) => (\n                      <div\n                        key={card.id}\n                        onClick={() => onSelectPhotoCard(card.id)}\n                        className=\"relative group cursor-pointer transform transition-all duration-300 hover:scale-105 hover:-translate-y-2\"\n                        data-testid={`photo-card-option-${card.id}`}\n                      >\n                        <div className=\"bg-gradient-to-br from-slate-900 to-slate-800 rounded-2xl p-4 shadow-2xl border border-slate-700 hover:border-blue-400 transition-all duration-300\">\n                          <div className=\"relative overflow-hidden rounded-xl mb-3\">\n                            <img \n                              src={card.imageUrl} \n                              alt={card.description}\n                              className=\"w-full h-40 object-cover transition-transform duration-300 group-hover:scale-110\"\n                            />\n                            <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                          </div>\n                          <p className=\"text-sm text-slate-300 font-medium text-center leading-tight\">{card.description}</p>\n                          <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-blue-500 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center\">\n                            <Check className=\"w-4 h-4 text-white\" />\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Selected Photo Card (visible to all players) */}\n              {selectedPhotoCard && (\n                <div data-testid=\"selected-photo-card\" className=\"relative\">\n                  <div className=\"bg-gradient-to-br from-slate-900 to-slate-800 rounded-2xl p-6 shadow-2xl border border-slate-700 max-w-lg mx-auto\">\n                    <div className=\"relative overflow-hidden rounded-xl mb-4\">\n                      <img \n                        src={selectedPhotoCard.imageUrl} \n                        alt={selectedPhotoCard.description}\n                        className=\"w-full h-64 object-cover\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/30 to-transparent\" />\n                    </div>\n                    <p className=\"text-white font-medium text-center text-lg leading-relaxed\">\n                      {selectedPhotoCard.description}\n                    </p>\n                    <div className=\"mt-3 text-center\">\n                      <span className=\"text-xs text-slate-400 font-mono uppercase tracking-wider\">Photo Card</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n              </div>\n            </div>\n          </div>\n\n        {/* Game Phase Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          \n          {/* Player Hand */}\n          {!isJudge && selectedPhotoCard && (\n            <div className=\"lg:col-span-2\">\n              <Card className=\"p-6 shadow-lg\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-semibold text-foreground\">Your Caption Cards</h3>\n                  <div className=\"text-sm text-muted-foreground\">\n                    <span data-testid=\"hand-count\">{playerHand.length}</span> cards\n                  </div>\n                </div>\n\n                {/* Card Exchange Option */}\n                {currentPlayer && !currentPlayer.hasExchangedCard && (\n                  <div className=\"mb-6 bg-muted rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h4 className=\"font-medium text-foreground\">Card Exchange</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Trade one card for a new one (once per round)\n                        </p>\n                      </div>\n                      <Button\n                        onClick={handleExchangeCard}\n                        disabled={!exchangeCardId}\n                        className=\"bg-accent text-accent-foreground hover:bg-accent/90 disabled:opacity-50\"\n                        data-testid=\"exchange-card-button\"\n                      >\n                        <RotateCcw className=\"mr-2 h-4 w-4\" />\n                        Exchange\n                      </Button>\n                    </div>\n                    {exchangeCardId && (\n                      <p className=\"text-sm text-muted-foreground mt-2\">\n                        Click a card below to exchange it\n                      </p>\n                    )}\n                  </div>\n                )}\n\n                {/* Caption Cards Grid */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {playerHand.map((card) => (\n                    <div\n                      key={card.id}\n                      onClick={() => {\n                        if (!currentPlayer?.hasSubmittedCard) {\n                          if (currentPlayer && !currentPlayer.hasExchangedCard) {\n                            // Allow selection for exchange or submission\n                            if (exchangeCardId) {\n                              handleExchangeSelection(card.id);\n                            } else {\n                              handleCardSelection(card.id);\n                            }\n                          } else {\n                            handleCardSelection(card.id);\n                          }\n                        }\n                      }}\n                      className={cn(\n                        \"relative group cursor-pointer transform transition-all duration-300 hover:scale-105 hover:-translate-y-2\",\n                        currentPlayer?.hasSubmittedCard && \"opacity-50 cursor-not-allowed\"\n                      )}\n                      data-testid={`caption-card-${card.id}`}\n                    >\n                      <div className={cn(\n                        \"bg-gradient-to-br from-slate-900 to-slate-800 rounded-2xl p-6 shadow-2xl border-2 transition-all duration-300 min-h-[160px] flex flex-col justify-between\",\n                        selectedCardId === card.id ? \"border-green-400 bg-gradient-to-br from-green-900/20 to-slate-800\" : \"border-slate-700 hover:border-blue-400\",\n                        exchangeCardId === card.id && \"border-orange-400 bg-gradient-to-br from-orange-900/20 to-slate-800\"\n                      )}>\n                        <div className=\"flex-1 flex items-center justify-center\">\n                          <p className=\"text-white font-medium text-center leading-relaxed\">{card.text}</p>\n                        </div>\n                        \n                        <div className=\"mt-4 flex items-center justify-between\">\n                          <div className=\"text-xs text-slate-400 font-mono uppercase tracking-wider\">Caption Card</div>\n                          <div className=\"flex items-center space-x-2\">\n                            {selectedCardId === card.id && (\n                              <div className=\"flex items-center space-x-1 text-green-400\">\n                                <Check className=\"h-4 w-4\" data-testid=\"card-selected-icon\" />\n                                <span className=\"text-xs font-medium\">Selected</span>\n                              </div>\n                            )}\n                            {exchangeCardId === card.id && (\n                              <div className=\"flex items-center space-x-1 text-orange-400\">\n                                <RotateCcw className=\"h-4 w-4\" data-testid=\"card-exchange-icon\" />\n                                <span className=\"text-xs font-medium\">Exchange</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        \n                        {/* Hover effect overlay */}\n                        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500/10 to-purple-500/10 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Submit Button */}\n                {!currentPlayer?.hasSubmittedCard && (\n                  <div className=\"mt-6 text-center\">\n                    <Button\n                      onClick={handleSubmitCard}\n                      disabled={!selectedCardId}\n                      className=\"bg-primary text-primary-foreground px-8 py-3 hover:bg-primary/90 disabled:opacity-50\"\n                      data-testid=\"submit-caption-button\"\n                    >\n                      <NotebookPen className=\"mr-2 h-4 w-4\" />\n                      Submit Caption\n                    </Button>\n                  </div>\n                )}\n              </Card>\n            </div>\n          )}\n\n          {/* Game Status & Judge Review */}\n          <div className=\"space-y-6\">\n            {/* Round Status */}\n            <Card className=\"p-6 shadow-lg\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Round Status</h3>\n              <div className=\"space-y-3\">\n                {gameState.players\n                  .filter(p => p.id !== gameState.room.currentJudgeId)\n                  .map((player) => (\n                    <div key={player.id} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-foreground\" data-testid={`player-status-${player.id}`}>\n                        {player.name}\n                      </span>\n                      <div data-testid={`submission-status-${player.id}`}>\n                        {player.hasSubmittedCard ? (\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                        ) : (\n                          <div className=\"w-4 h-4 border-2 border-muted rounded-full\" />\n                        )}\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </Card>\n\n            {/* Judge Review Phase */}\n            {isJudge && allPlayersSubmitted && (\n              <Card className=\"p-6 shadow-lg\" data-testid=\"judge-review\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n                  <Gavel className=\"inline mr-2 h-5 w-5\" />\n                  Judge's Decision\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  {submittedCards.map((card: any, index: number) => (\n                    <div\n                      key={index}\n                      onClick={() => onSelectWinner(card.playerId)}\n                      className=\"relative group cursor-pointer transform transition-all duration-300 hover:scale-102\"\n                      data-testid={`submitted-card-${index}`}\n                    >\n                      <div className=\"bg-gradient-to-br from-slate-900 to-slate-800 rounded-xl p-5 shadow-xl border border-slate-700 hover:border-yellow-400 transition-all duration-300\">\n                        <p className=\"text-white font-medium leading-relaxed mb-3\">{card.text}</p>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"text-xs text-slate-400 font-mono uppercase tracking-wider\">Anonymous Submission</div>\n                          <div className=\"text-xs text-yellow-400 font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                            Click to select winner\n                          </div>\n                        </div>\n                        <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-500/10 to-orange-500/10 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":20486},"client/src/components/game/winner-announcement.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { type Player } from \"@shared/schema\";\nimport { Trophy, Crown, Sparkles } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface WinnerAnnouncementProps {\n  winner: Player;\n  winningCaption: string;\n  onComplete: () => void;\n}\n\nexport function WinnerAnnouncement({ winner, winningCaption, onComplete }: WinnerAnnouncementProps) {\n  const [stage, setStage] = useState(0); // 0: fade in, 1: display, 2: fade out\n\n  useEffect(() => {\n    const timer1 = setTimeout(() => setStage(1), 500);\n    const timer2 = setTimeout(() => setStage(2), 3500);\n    const timer3 = setTimeout(() => onComplete(), 4000);\n\n    return () => {\n      clearTimeout(timer1);\n      clearTimeout(timer2);\n      clearTimeout(timer3);\n    };\n  }, [onComplete]);\n\n  return (\n    <div\n      className={cn(\n        \"fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm transition-all duration-500\",\n        stage === 0 && \"opacity-0 scale-95\",\n        stage === 1 && \"opacity-100 scale-100\",\n        stage === 2 && \"opacity-0 scale-105\"\n      )}\n    >\n      <div className=\"relative max-w-2xl mx-4 text-center\">\n        {/* Floating sparkles */}\n        <div className=\"absolute -top-10 -left-10 animate-bounce\">\n          <Sparkles className=\"w-8 h-8 text-yellow-400\" />\n        </div>\n        <div className=\"absolute -top-5 -right-8 animate-bounce delay-300\">\n          <Sparkles className=\"w-6 h-6 text-blue-400\" />\n        </div>\n        <div className=\"absolute -bottom-8 left-5 animate-bounce delay-700\">\n          <Sparkles className=\"w-7 h-7 text-green-400\" />\n        </div>\n        \n        {/* Main announcement card */}\n        <div className=\"bg-gradient-to-br from-amber-50 to-orange-100 dark:from-amber-900/30 dark:to-orange-900/30 rounded-3xl p-8 shadow-2xl border border-amber-200 dark:border-amber-700\">\n          {/* Winner badge */}\n          <div className=\"inline-flex items-center space-x-3 bg-gradient-to-r from-yellow-400 to-orange-500 text-white px-6 py-3 rounded-full font-bold text-lg shadow-lg mb-6 animate-pulse\">\n            <Crown className=\"w-6 h-6\" />\n            <span>Round Winner!</span>\n            <Crown className=\"w-6 h-6\" />\n          </div>\n\n          {/* Winner name */}\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-800 dark:text-gray-100 mb-4\">\n            {winner.name}\n          </h2>\n\n          {/* Trophy count */}\n          <div className=\"flex items-center justify-center space-x-2 mb-6\">\n            <Trophy className=\"w-8 h-8 text-yellow-500\" />\n            <span className=\"text-3xl font-bold text-gray-700 dark:text-gray-200\">\n              {winner.trophies}\n            </span>\n            <span className=\"text-xl text-gray-600 dark:text-gray-400\">\n              {winner.trophies === 1 ? 'Trophy' : 'Trophies'}\n            </span>\n          </div>\n\n          {/* Winning caption */}\n          <div className=\"bg-white/80 dark:bg-gray-800/80 rounded-2xl p-6 shadow-inner\">\n            <p className=\"text-lg md:text-xl font-medium text-gray-800 dark:text-gray-200 italic leading-relaxed\">\n              \"{winningCaption}\"\n            </p>\n          </div>\n\n          {/* Celebration text */}\n          <div className=\"mt-6 text-lg text-gray-600 dark:text-gray-400 animate-bounce\">\n            🎉 Congratulations! 🎉\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3415},"server/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.SUPABASE_URL!;\nconst supabaseAnonKey = process.env.SUPABASE_ANON_KEY!;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nexport interface SupabaseImage {\n  name: string;\n  publicUrl: string;\n}\n\nexport async function getImagesFromBucket(bucketName: string = 'photocards'): Promise<SupabaseImage[]> {\n  try {\n    console.log(`🔍 Fetching images from Supabase bucket: ${bucketName}`);\n    \n    // List all files in the bucket\n    const { data: files, error } = await supabase.storage\n      .from(bucketName)\n      .list('', {\n        limit: 100,\n        sortBy: { column: 'name', order: 'asc' }\n      });\n\n    if (error) {\n      console.error('❌ Error listing files from Supabase:', error);\n      throw error;\n    }\n\n    if (!files || files.length === 0) {\n      console.warn('⚠️ No files found in bucket:', bucketName);\n      return [];\n    }\n\n    // Get public URLs for all files\n    const images: SupabaseImage[] = [];\n    for (const file of files) {\n      // Skip folders (they have no size)\n      if (!file.metadata?.size) continue;\n      \n      const { data } = supabase.storage\n        .from(bucketName)\n        .getPublicUrl(file.name);\n\n      if (data?.publicUrl) {\n        images.push({\n          name: file.name,\n          publicUrl: data.publicUrl\n        });\n      }\n    }\n\n    console.log(`✅ Successfully fetched ${images.length} images from Supabase`);\n    return images;\n    \n  } catch (error) {\n    console.error('❌ Failed to fetch images from Supabase:', error);\n    throw error;\n  }\n}\n\nexport async function testSupabaseConnection(): Promise<boolean> {\n  try {\n    console.log('🔗 Testing Supabase connection...');\n    \n    // Try to list buckets as a connection test\n    const { data, error } = await supabase.storage.listBuckets();\n    \n    if (error) {\n      console.error('❌ Supabase connection test failed:', error);\n      return false;\n    }\n    \n    console.log('✅ Supabase connection successful');\n    console.log('📦 Available buckets:', data?.map(b => b.name).join(', '));\n    return true;\n    \n  } catch (error) {\n    console.error('❌ Supabase connection test failed:', error);\n    return false;\n  }\n}","size_bytes":2361}},"version":1}